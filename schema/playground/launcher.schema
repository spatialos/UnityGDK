package playground;

import "playground/shared.schema";
import "improbable/gdk/debug/worker_inspector.schema";

// Launcher represents an entity that can launch Launchables.
// The act of launching costs the launcher energy.
// Launchable component expects ECS entity to also have a Rigidbody component.

// Command sent by clients to request launching a Launchable.
type LaunchCommandRequest {
    EntityId entity_to_launch = 1;
    playground.Vector3f impact_point = 2;
    playground.Vector3f launch_direction = 3;
    float launch_energy = 4;
    EntityId player = 5;
}

type LaunchCommandResponse {}

// Command sent by gamelogic to get a Launchable to launch itself.
type LaunchMeCommandRequest {
    playground.Vector3f impact_point = 1;
    playground.Vector3f launch_direction = 2;
    float launch_energy = 3;
    EntityId player = 4;
}

type LaunchMeCommandResponse {}

type ScoreIncreaseRequest {
    float amount = 1; 
}

type ScoreIncreaseResponse {}

component Launcher {
    id = 12005;
    float energy_left = 1;
    float recharge_time_left = 3;
    command LaunchCommandResponse launch_entity(LaunchCommandRequest);
    command ScoreIncreaseResponse increase_score(ScoreIncreaseRequest);
}


[improbable.gdk.debug.ComponentIcon("PhysicsMaterial2D Icon")]
component Launchable {
    id = 12006;
    EntityId most_recent_launcher = 1;
    command LaunchMeCommandResponse launch_me(LaunchMeCommandRequest);
}

