// Generated by SpatialOS codegen. DO NOT EDIT!
// source: BlittableComponent in blittable_types.schema.

namespace Improbable.TestSchema
{

public static class BlittableComponent_Extensions
{
  public static BlittableComponent.Data Get(this global::Improbable.Worker.IComponentData<BlittableComponent> data)
  {
    return (BlittableComponent.Data) data;
  }

  public static BlittableComponent.Update Get(this global::Improbable.Worker.IComponentUpdate<BlittableComponent> update)
  {
    return (BlittableComponent.Update) update;
  }
}

public partial class BlittableComponent : global::Improbable.Worker.IComponentMetaclass
{
  public const uint ComponentId = 1001;

  uint global::Improbable.Worker.IComponentMetaclass.ComponentId
  {
    get { return ComponentId; }
  }

  /// <summary>
  /// Concrete data type for the BlittableComponent component.
  /// </summary>
  public class Data : global::Improbable.Worker.IComponentData<BlittableComponent>, global::Improbable.Collections.IDeepCopyable<Data>
  {
    public global::Improbable.TestSchema.BlittableComponentData Value;

    public Data(global::Improbable.TestSchema.BlittableComponentData value)
    {
      Value = value;
    }

    public Data(
        bool boolField,
        int intField,
        long longField,
        float floatField,
        double doubleField)
    {
      Value = new global::Improbable.TestSchema.BlittableComponentData(
          boolField,
          intField,
          longField,
          floatField,
          doubleField);
    }

    public Data DeepCopy()
    {
      return new Data(Value.DeepCopy());
    }

    public global::Improbable.Worker.IComponentUpdate<BlittableComponent> ToUpdate()
    {
      var update = new Update();
      update.SetBoolField(Value.boolField);
      update.SetIntField(Value.intField);
      update.SetLongField(Value.longField);
      update.SetFloatField(Value.floatField);
      update.SetDoubleField(Value.doubleField);
      return update;
    }
  }

  /// <summary>
  /// Concrete update type for the BlittableComponent component.
  /// </summary>
  public class Update : global::Improbable.Worker.IComponentUpdate<BlittableComponent>, global::Improbable.Collections.IDeepCopyable<Update>
  {
    /// <summary>
    /// Field bool_field = 1.
    /// </summary>
    public global::Improbable.Collections.Option<bool> boolField;
    public Update SetBoolField(bool _value)
    {
      boolField.Set(_value);
      return this;
    }

    /// <summary>
    /// Field int_field = 2.
    /// </summary>
    public global::Improbable.Collections.Option<int> intField;
    public Update SetIntField(int _value)
    {
      intField.Set(_value);
      return this;
    }

    /// <summary>
    /// Field long_field = 3.
    /// </summary>
    public global::Improbable.Collections.Option<long> longField;
    public Update SetLongField(long _value)
    {
      longField.Set(_value);
      return this;
    }

    /// <summary>
    /// Field float_field = 4.
    /// </summary>
    public global::Improbable.Collections.Option<float> floatField;
    public Update SetFloatField(float _value)
    {
      floatField.Set(_value);
      return this;
    }

    /// <summary>
    /// Field double_field = 5.
    /// </summary>
    public global::Improbable.Collections.Option<double> doubleField;
    public Update SetDoubleField(double _value)
    {
      doubleField.Set(_value);
      return this;
    }

    public Update DeepCopy()
    {
      var _result = new Update();
      if (boolField.HasValue)
      {
        bool field;
        field = boolField.Value;
        _result.boolField.Set(field);
      }
      if (intField.HasValue)
      {
        int field;
        field = intField.Value;
        _result.intField.Set(field);
      }
      if (longField.HasValue)
      {
        long field;
        field = longField.Value;
        _result.longField.Set(field);
      }
      if (floatField.HasValue)
      {
        float field;
        field = floatField.Value;
        _result.floatField.Set(field);
      }
      if (doubleField.HasValue)
      {
        double field;
        field = doubleField.Value;
        _result.doubleField.Set(field);
      }
      return _result;
    }

    public global::Improbable.Worker.IComponentData<BlittableComponent> ToInitialData()
    {
      return new Data(new global::Improbable.TestSchema.BlittableComponentData(
          boolField.Value,
          intField.Value,
          longField.Value,
          floatField.Value,
          doubleField.Value));
    }

    public void ApplyTo(global::Improbable.Worker.IComponentData<BlittableComponent> _data)
    {
      var _concrete = _data.Get();
      if (boolField.HasValue)
      {
        _concrete.Value.boolField = boolField.Value;
      }
      if (intField.HasValue)
      {
        _concrete.Value.intField = intField.Value;
      }
      if (longField.HasValue)
      {
        _concrete.Value.longField = longField.Value;
      }
      if (floatField.HasValue)
      {
        _concrete.Value.floatField = floatField.Value;
      }
      if (doubleField.HasValue)
      {
        _concrete.Value.doubleField = doubleField.Value;
      }
    }
  }

  public partial class Commands
  {
  }

  // Implementation details below here.
  //----------------------------------------------------------------

  public global::Improbable.Worker.Internal.ComponentProtocol.ComponentVtable Vtable {
    get {
      global::Improbable.Worker.Internal.ComponentProtocol.ComponentVtable vtable;
      vtable.ComponentId = ComponentId;
      vtable.Free = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientHandles.ClientFree);
      vtable.Copy = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(global::Improbable.Worker.Internal.ClientHandles.ClientCopy);
      vtable.Deserialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientDeserialize);
      vtable.Serialize = global::System.Runtime.InteropServices.Marshal
          .GetFunctionPointerForDelegate(clientSerialize);
      return vtable;
    }
  }

  public void InvokeHandler(global::Improbable.Worker.Dynamic.Handler handler)
  {
    handler.Accept<BlittableComponent>(this);
  }

  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientDeserialize
      clientDeserialize = ClientDeserialize;
  private static unsafe readonly global::Improbable.Worker.Internal.ComponentProtocol.ClientSerialize
      clientSerialize = ClientSerialize;

  [global::Improbable.Worker.Internal.MonoPInvokeCallback(typeof(global::Improbable.Worker.Internal.ComponentProtocol.ClientDeserialize))]
  private static unsafe global::System.Byte
  ClientDeserialize(global::System.UInt32 componentId,
                    global::System.Byte handleType,
                    global::Improbable.Worker.Internal.Pbio.Object* root,
                    global::Improbable.Worker.Internal.ComponentProtocol.ClientHandle** handleOut)
  {
    *handleOut = null;
    try
    {
      *handleOut = global::Improbable.Worker.Internal.ClientHandles.HandleAlloc();
      if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Update) {
        var data = new Update();
        var fieldsToClear = new global::System.Collections.Generic.HashSet<uint>();
        var fieldsToClearCount = global::Improbable.Worker.Internal.Pbio.GetUint32Count(root, /* fields to clear */ 1);
        for (uint i = 0; i < fieldsToClearCount; ++i)
        {
           fieldsToClear.Add(global::Improbable.Worker.Internal.Pbio.IndexUint32(root, /* fields to clear */ 1, i));
        }
        var stateObject = global::Improbable.Worker.Internal.Pbio.GetObject(
            global::Improbable.Worker.Internal.Pbio.GetObject(root, /* entity_state */ 2), 1001);
        if (global::Improbable.Worker.Internal.Pbio.GetBoolCount(stateObject, 1) > 0)
        {
          bool field;
          {
            field = global::Improbable.Worker.Internal.Pbio.GetBool(stateObject, 1) != 0;
          }
          data.boolField.Set(field);
        }
        if (global::Improbable.Worker.Internal.Pbio.GetInt32Count(stateObject, 2) > 0)
        {
          int field;
          {
            field = global::Improbable.Worker.Internal.Pbio.GetInt32(stateObject, 2);
          }
          data.intField.Set(field);
        }
        if (global::Improbable.Worker.Internal.Pbio.GetInt64Count(stateObject, 3) > 0)
        {
          long field;
          {
            field = global::Improbable.Worker.Internal.Pbio.GetInt64(stateObject, 3);
          }
          data.longField.Set(field);
        }
        if (global::Improbable.Worker.Internal.Pbio.GetFloatCount(stateObject, 4) > 0)
        {
          float field;
          {
            field = global::Improbable.Worker.Internal.Pbio.GetFloat(stateObject, 4);
          }
          data.floatField.Set(field);
        }
        if (global::Improbable.Worker.Internal.Pbio.GetDoubleCount(stateObject, 5) > 0)
        {
          double field;
          {
            field = global::Improbable.Worker.Internal.Pbio.GetDouble(stateObject, 5);
          }
          data.doubleField.Set(field);
        }
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Snapshot)
      {
        var data = new Data(global::Improbable.TestSchema.BlittableComponentData_Internal.Read(
            global::Improbable.Worker.Internal.Pbio.GetObject(root, 1001)));
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Request)
      {
        var data = new global::Improbable.Worker.Internal.GenericCommandObject();
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
        return 0;
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Response)
      {
        var data = new global::Improbable.Worker.Internal.GenericCommandObject();
        **handleOut = global::Improbable.Worker.Internal.ClientHandles.Instance.CreateHandle(data);
        return 0;
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
      return 0;
    }
    return 1;
  }

  [global::Improbable.Worker.Internal.MonoPInvokeCallback(typeof(global::Improbable.Worker.Internal.ComponentProtocol.ClientSerialize))]
  private static unsafe void
  ClientSerialize(global::System.UInt32 componentId,
                  global::System.Byte handleType,
                  global::Improbable.Worker.Internal.ComponentProtocol.ClientHandle* handle,
                  global::Improbable.Worker.Internal.Pbio.Object* root)
  {
    try
    {
      var _pool = global::Improbable.Worker.Internal.ClientHandles.Instance.GetGcHandlePool(*handle);
      if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Update) {
        var data = (Update) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(*handle);
        var stateObject = global::Improbable.Worker.Internal.Pbio.AddObject(
            global::Improbable.Worker.Internal.Pbio.AddObject(root, /* entity_state */ 2), 1001);
        if (data.boolField.HasValue)
        {
          {
            global::Improbable.Worker.Internal.Pbio.AddBool(stateObject, 1, (byte) (data.boolField.Value ? 1 : 0));
          }
        }
        if (data.intField.HasValue)
        {
          {
            global::Improbable.Worker.Internal.Pbio.AddInt32(stateObject, 2, data.intField.Value);
          }
        }
        if (data.longField.HasValue)
        {
          {
            global::Improbable.Worker.Internal.Pbio.AddInt64(stateObject, 3, data.longField.Value);
          }
        }
        if (data.floatField.HasValue)
        {
          {
            global::Improbable.Worker.Internal.Pbio.AddFloat(stateObject, 4, data.floatField.Value);
          }
        }
        if (data.doubleField.HasValue)
        {
          {
            global::Improbable.Worker.Internal.Pbio.AddDouble(stateObject, 5, data.doubleField.Value);
          }
        }
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Snapshot) {
        var data = (Data) global::Improbable.Worker.Internal.ClientHandles.Instance.Dereference(*handle);
        global::Improbable.TestSchema.BlittableComponentData_Internal.Write(_pool, data.Value, global::Improbable.Worker.Internal.Pbio.AddObject(root, 1001));
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Request)
      {
        global::Improbable.Worker.Internal.Pbio.AddObject(root, 1001);
      }
      else if (handleType == (byte) global::Improbable.Worker.Internal.ComponentProtocol.ClientHandleType.Response)
      {
        global::Improbable.Worker.Internal.Pbio.AddObject(root, 1001);
      }
    }
    catch (global::System.Exception e)
    {
      global::Improbable.Worker.ClientError.LogClientException(e);
    }
  }
}

}
