
<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentDetails = GetComponentDetails();
    var fieldDetailsList = GetFieldDetailsList();
    var eventDetailsList = GetEventDetailsList();
    var commandDetailsList = GetCommandDetailsList();
#>
<#= generatedHeader #>

using Unity.Entities;
using Improbable.Gdk.Core;
using Improbable.Gdk.Core.MonoBehaviours;
using Improbable.Worker;
using Entity = Unity.Entities.Entity;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        [ComponentId(<#= unityComponentDefinition.Id #>)]
        internal class ReaderWriterCreator : IReaderWriterCreator
        {
            public IReaderWriterInternal CreateReaderWriter(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
            {
                return new ReaderWriterImpl(entity, entityManager, logDispatcher);
            }
        }

        [ReaderInterface]
        [ComponentId(<#= unityComponentDefinition.Id #>)]
<# if(fieldDetailsList.Count > 0) { #>
        public interface Reader : IReader<<#= componentDetails.TypeName #>, <#= componentDetails.TypeName #>.Update>
<# } else { #>
        public interface Reader : IReader<<#= componentDetails.TypeName #>>
<# } #>
        {
        }

        [WriterInterface]
        [ComponentId(<#= unityComponentDefinition.Id #>)]
        public interface Writer 
        {
        }

        internal class ReaderWriterImpl : IReaderWriterInternal, Reader, Writer
        {
            public ReaderWriterImpl(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
            {
            }
            
            public Authority Authority => throw new System.NotImplementedException();

            public <#= componentDetails.TypeName #> Data => throw new System.NotImplementedException();

            public event GameObjectDelegates.AuthorityChanged AuthorityChanged
            {
                add => throw new System.NotImplementedException();
                remove => throw new System.NotImplementedException();
            }

            public void OnAuthorityChange(global::Improbable.Worker.Authority auth)
            {
                throw new System.NotImplementedException();
            }
<# if (fieldDetailsList.Count > 0) { #>

            public void OnComponentUpdate(<#= componentDetails.TypeName #>.Update update)
            {
                throw new System.NotImplementedException();
            }

            public event GameObjectDelegates.ComponentUpdated<<#= componentDetails.TypeName #>.Update> ComponentUpdated
            {
                add => throw new System.NotImplementedException();
                remove => throw new System.NotImplementedException();
            }
<# } #>
<# for (var j = 0; j < eventDetailsList.Count; j++) { #>

            public void On<#= eventDetailsList[j].EventName #>Event(<#= eventDetailsList[j].EventName #>Event payload)
            {
                throw new System.NotImplementedException();
            }
<# } #>
<# for (var j = 0; j < commandDetailsList.Count; j++) { #>

            public void On<#= commandDetailsList[j].CommandName #>CommandRequest(<#= commandDetailsList[j].CommandName #>.Request request)
            {
                throw new System.NotImplementedException();
            }
<# } #>
        }
    }
}
