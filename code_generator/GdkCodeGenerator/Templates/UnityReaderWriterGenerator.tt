
<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentDetails = GetComponentDetails();
    var fieldDetailsList = GetFieldDetailsList();
    var eventDetailsList = GetEventDetailsList();
    var commandDetailsList = GetCommandDetailsList();
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using Unity.Entities;
using Improbable.Gdk.Core;
using Improbable.Gdk.Core.GameObjectRepresentation;
using Entity = Unity.Entities.Entity;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public partial class Requirables
        {
            [InjectableId(InjectableType.ReaderWriter, <#= unityComponentDefinition.Id #>)]
            internal class ReaderWriterCreator : IInjectableCreator
            {
                public IInjectable CreateInjectable(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
                {
                    return new ReaderWriterImpl(entity, entityManager, logDispatcher);
                }
            }

            [InjectableId(InjectableType.ReaderWriter, <#= unityComponentDefinition.Id #>)]
            [InjectionCondition(InjectionCondition.RequireComponentToRead)]
            public interface Reader : IReader<<#= componentDetails.TypeName #>, <#= componentDetails.TypeName #>.Update>
            {
<# foreach (var fieldDetails in fieldDetailsList) { #>
                event Action<<#= fieldDetails.Type #>> <#= fieldDetails.PascalCaseName #>Updated;
<# } #>
<# foreach (var eventDetails in eventDetailsList) {
            var eventType = eventDetails.EventName + "Event";
#>
                event Action<<#= eventType #>> On<#= eventDetails.EventName #>;
<# } #>
        }

            [InjectableId(InjectableType.ReaderWriter, <#= unityComponentDefinition.Id #>)]
            [InjectionCondition(InjectionCondition.RequireComponentWithAuthority)]
            public interface Writer : IWriter<<#= componentDetails.TypeName #>, <#= componentDetails.TypeName #>.Update>
            {
<# foreach (var eventDetails in eventDetailsList) { #>
                void Send<#= eventDetails.EventName #>( <#= eventDetails.FullyQualifiedPayloadTypeName #> payload);
<# } #>
            }

<# if (componentDetails.IsBlittable) { #>
            internal class ReaderWriterImpl :
                BlittableReaderWriterBase<<#= componentDetails.TypeName #>, <#= componentDetails.TypeName #>.Update>, Reader, Writer
<# } else { #>
            internal class ReaderWriterImpl :
                NonBlittableReaderWriterBase<<#= componentDetails.TypeName #>, <#= componentDetails.TypeName #>.Update>, Reader, Writer
<# } #>
            {
                public ReaderWriterImpl(Entity entity,EntityManager entityManager,ILogDispatcher logDispatcher)
                    : base(entity, entityManager, logDispatcher)
                {
                }
<# foreach (var fieldDetails in fieldDetailsList) { #>

                private readonly List<Action<<#= fieldDetails.Type #>>> <#= fieldDetails.CamelCaseName #>Delegates = new List<Action<<#= fieldDetails.Type #>>>();

                public event Action<<#= fieldDetails.Type #>> <#= fieldDetails.PascalCaseName #>Updated
                {
                    add => <#= fieldDetails.CamelCaseName #>Delegates.Add(value);
                    remove => <#= fieldDetails.CamelCaseName #>Delegates.Remove(value);
                }
<# } #>

                protected override void TriggerFieldCallbacks(<#= componentDetails.TypeName#>.Update update)
                {
<# foreach (var fieldDetails in fieldDetailsList) { #>
                    DispatchWithErrorHandling(update.<#= fieldDetails.PascalCaseName #>, <#= fieldDetails.CamelCaseName #>Delegates);
<# } #>
                }
<# if (componentDetails.IsBlittable) { #>
                protected override void ApplyUpdate(<#= componentDetails.TypeName#>.Update update, ref <#= componentDetails.TypeName#> data)
<# } else { #>
                protected override void ApplyUpdate(<#= componentDetails.TypeName#>.Update update, <#= componentDetails.TypeName#> data)
<# } #>
                {
<# foreach (var fieldDetails in fieldDetailsList) { #>
                    if (update.<#= fieldDetails.PascalCaseName #>.HasValue)
                    {
                        data.<#= fieldDetails.PascalCaseName #> = update.<#= fieldDetails.PascalCaseName #>.Value;
                    }
<# } #>
                }
<# foreach (var eventDetails in eventDetailsList) {
                var delegateList = eventDetails.CamelCaseTypeName + "Delegates";
                var eventType = eventDetails.EventName + "Event";
#>

                private readonly List<Action<<#= eventType #>>> <#= delegateList #> = new System.Collections.Generic.List<System.Action<<#= eventType #>>>();

                public event Action<<#= eventType #>> On<#= eventDetails.EventName #>
                {
                    add => <#= delegateList #>.Add(value);
                    remove => <#= delegateList #>.Remove(value);
                }

                public void On<#= eventType #>(<#= eventType #> payload)
                {
                    DispatchEventWithErrorHandling(payload, <#= delegateList #>);
                }

                public void Send<#= eventDetails.EventName #>( <#= eventDetails.FullyQualifiedPayloadTypeName #> payload)
                {
                    var sender = EntityManager.GetComponentData<EventSender<<#= componentDetails.TypeName #>>>(Entity);
                    sender.Send<#= eventDetails.EventName #>Event(payload);
                }
<# } #>
            }
        }
    }
}
