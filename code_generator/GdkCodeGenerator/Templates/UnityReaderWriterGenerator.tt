
<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentDetails = GetComponentDetails();
    var fieldDetailsList = GetFieldDetailsList();
    var eventDetailsList = GetEventDetailsList();
    var commandDetailsList = GetCommandDetailsList();
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using Unity.Entities;
using Improbable.Gdk.Core;
using Improbable.Gdk.Core.GameObjectRepresentation;
using Entity = Unity.Entities.Entity;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        [ComponentId(<#= unityComponentDefinition.Id #>)]
        internal class ReaderWriterCreator : IReaderWriterCreator
        {
            public IReaderWriterInternal CreateReaderWriter(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
            {
                return new ReaderWriterImpl(entity, entityManager, logDispatcher);
            }
        }

        [ReaderInterface]
        [ComponentId(<#= unityComponentDefinition.Id #>)]
        public interface Reader : IReader<<#= componentDetails.TypeName #>, <#= componentDetails.TypeName #>.Update>
        {
<# foreach (var fieldDetails in fieldDetailsList) { #>
            event Action<<#= fieldDetails.Type #>> <#= fieldDetails.PascalCaseName #>Updated;
<# } #>
<# foreach (var eventDetails in eventDetailsList) {
            var payloadType = eventDetails.FullyQualifiedPayloadTypeName;
#>
            event Action<<#= payloadType #>> On<#= eventDetails.EventName #>;
<# } #>
        }

        [WriterInterface]
        [ComponentId(<#= unityComponentDefinition.Id #>)]
        public interface Writer : IWriter<<#= componentDetails.TypeName #>, <#= componentDetails.TypeName #>.Update>
        {
<# foreach (var eventDetails in eventDetailsList) { #>
            void Send<#= eventDetails.EventName #>( <#= eventDetails.FullyQualifiedPayloadTypeName #> payload);
<# } #>
        }

        internal class ReaderWriterImpl :
            ReaderWriterBase<<#= componentDetails.TypeName #>, <#= componentDetails.TypeName #>.Update>, Reader, Writer
        {
            public ReaderWriterImpl(Entity entity,EntityManager entityManager,ILogDispatcher logDispatcher)
                : base(entity, entityManager, logDispatcher)
            {
            }
<# foreach (var fieldDetails in fieldDetailsList) { #>

            private readonly List<Action<<#= fieldDetails.Type #>>> <#= fieldDetails.CamelCaseName #>Delegates = new List<Action<<#= fieldDetails.Type #>>>();

            public event Action<<#= fieldDetails.Type #>> <#= fieldDetails.PascalCaseName #>Updated
            {
                add => <#= fieldDetails.CamelCaseName #>Delegates.Add(value);
                remove => <#= fieldDetails.CamelCaseName #>Delegates.Remove(value);
            }
<# } #>

            protected override void TriggerFieldCallbacks(<#= componentDetails.TypeName#>.Update update)
            {
<# foreach (var fieldDetails in fieldDetailsList) { #>
                DispatchWithErrorHandling(update.<#= fieldDetails.PascalCaseName #>, <#= fieldDetails.CamelCaseName #>Delegates);
<# } #>
            }
            protected override void ApplyUpdate(<#= componentDetails.TypeName#>.Update update, ref <#= componentDetails.TypeName#> data)
            {
<# foreach (var fieldDetails in fieldDetailsList) { #>
                if (update.<#= fieldDetails.PascalCaseName #>.HasValue)
                {
                    data.<#= fieldDetails.PascalCaseName #> = update.<#= fieldDetails.PascalCaseName #>.Value;
                }
<# } #>
            }
<# foreach (var eventDetails in eventDetailsList) {
            var delegateList = eventDetails.CamelCaseName + "Delegates";
            var payloadType = eventDetails.FullyQualifiedPayloadTypeName;
#>

            private readonly List<Action<<#= payloadType #>>> <#= delegateList #> = new System.Collections.Generic.List<System.Action<<#= payloadType #>>>();

            public event Action<<#= payloadType #>> On<#= eventDetails.EventName #>
            {
                add => <#= delegateList #>.Add(value);
                remove => <#= delegateList #>.Remove(value);
            }

            public void On<#= eventDetails.EventName #>Event(<#= payloadType #> payload)
            {
                DispatchEventWithErrorHandling(payload, <#= delegateList #>);
            }

            public void Send<#= eventDetails.EventName #>(<#= eventDetails.FullyQualifiedPayloadTypeName #> payload)
            {
                var sender = EntityManager.GetComponentData<EventSender.<#= eventDetails.EventName #>>(Entity);
                sender.Events.Add(payload);
            }
<# } #>
<# foreach (var command in commandDetailsList) { #>

            public void On<#= command.CommandName #>CommandRequest(<#= command.CommandName #>.ReceivedRequest request)
            {
                throw new System.NotImplementedException();
            }
<# } #>
        }
    }
}
