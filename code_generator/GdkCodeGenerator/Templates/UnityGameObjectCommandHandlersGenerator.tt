
<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentDetails = GetComponentDetails();
    var fieldDetailsList = GetFieldDetailsList();
    var eventDetailsList = GetEventDetailsList();
    var commandDetailsList = GetCommandDetailsList();
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using Improbable;
using Improbable.Gdk.Core;
using Improbable.Gdk.Core.GameObjectRepresentation;
using Unity.Entities;
using UnityEngine;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public partial class Requirables
        {
            internal class CommandRequestSenderCreator : IInjectableCreator
            {
                public IInjectable CreateInjectable(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
                {
                    return new CommandRequestSender(entity, entityManager, logDispatcher);
                }
            }

            [InjectableId(InjectableType.CommandRequestSender, <#= unityComponentDefinition.Id #>)]
            [InjectionCondition(InjectionCondition.RequireNothing)]
            public class CommandRequestSender : IInjectable
            {
                private Entity entity;
                private readonly EntityManager entityManager;

                public CommandRequestSender(Entity entity, EntityManager entityManager, ILogDispatcher logger)
                {
                    this.entity = entity;
                    this.entityManager = entityManager;
                }

<# foreach(var commandDetails in commandDetailsList) { #>
                public void Send<#= commandDetails.CommandName #>Request(EntityId entityId, <#= commandDetails.RequestType #> request)
                {
                    try
                    {
                        var ecsCommandRequestSender = entityManager.GetComponentData<CommandRequestSender<SpatialOS<#= componentDetails.ComponentName #>>>(entity);
                        ecsCommandRequestSender.Send<#= commandDetails.CommandName #>Request(entityId.Id, request);
                    }
                    catch (Exception e)
                    {
                        throw new SendCommandRequestFailedException(e, entity.Index);
                    }
                    
                }

<# } #>
            }

            internal class CommandRequestHandlerCreator : IInjectableCreator
            {
                public IInjectable CreateInjectable(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
                {
                    return new CommandRequestHandler(entity, entityManager, logDispatcher);
                }
            }

            [InjectableId(InjectableType.CommandRequestHandler, <#= unityComponentDefinition.Id #>)]
            [InjectionCondition(InjectionCondition.RequireComponentWithAuthority)]
            public class CommandRequestHandler : IInjectable
            {
                private Entity entity;
                private readonly EntityManager entityManager;
                private ILogDispatcher logger;

                public CommandRequestHandler(Entity entity, EntityManager entityManager, ILogDispatcher logger)
                {
                    this.entity = entity;
                    this.entityManager = entityManager;
                    this.logger = logger;
                }

<# foreach(var commandDetails in commandDetailsList) {
           var commandRequestType = commandDetails.CommandName + ".Request";
           var delegateList = commandDetails.CamelCaseTypeName + "Delegates";
#>
                private readonly List<Action<<#= commandRequestType #>>> <#= delegateList #> = new List<Action<<#= commandRequestType #>>>();
                public event Action<<#= commandRequestType #>> On<#= commandDetails.CommandName #>Request
                {
                    add => <#= delegateList #>.Add(value);
                    remove => <#= delegateList #>.Remove(value);
                }

                public void On<#= commandDetails.CommandName #>RequestInternal(<#= commandRequestType #> request)
                {
                    foreach (var callback in <#= delegateList #>)
                    {
                        try
                        {
                            callback(request);
                        }
                        catch (Exception e)
                        {
                            // Log the exception but do not rethrow it, as other delegates should still get called
                            logger.HandleLog(LogType.Exception, new LogEvent().WithException(e));
                        }
                    }
                }
<# } #>
            }

            internal class CommandResponseHandlerCreator : IInjectableCreator
            {
                public IInjectable CreateInjectable(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
                {
                    return new CommandResponseHandler(entity, entityManager, logDispatcher);
                }
            }

            [InjectableId(InjectableType.CommandResponseHandler, <#= unityComponentDefinition.Id #>)]
            [InjectionCondition(InjectionCondition.RequireNothing)]
            public class CommandResponseHandler : IInjectable
            {
                public CommandResponseHandler(Entity entity, EntityManager entityManager, ILogDispatcher logger)
                {

                }
            }
        }
    }
}
