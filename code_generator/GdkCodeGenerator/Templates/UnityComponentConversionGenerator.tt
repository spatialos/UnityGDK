<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var commandDetailsList = GetCommandDetailsList();
    var eventDetailsList = GetEventDetailsList();
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Unity.Mathematics;
using Unity.Entities;
using Improbable.Worker.Core;
using Improbable.Gdk.Core;
using Improbable.Gdk.Core.CodegenAdapters;
using Improbable.Gdk.Core.Commands;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public class DispatcherHandler : ComponentDispatcherHandler
        {
            public override uint ComponentId => <#= componentDetails.ComponentId #>;

            private readonly EntityManager entityManager;

            private const string LoggerName = "<#= componentDetails.ComponentName #>.DispatcherHandler";

<# foreach (var commandDetails in commandDetailsList) { #>
            private CommandStorages.<#= commandDetails.CommandName#> <#= commandDetails.CamelCaseName #>Storage;
<# } #>

            public DispatcherHandler(MutableView mutableView, global::Unity.Entities.World world) : base(mutableView, world)
            {
                entityManager = mutableView.EntityManager;
                var bookkeepingSystem = world.GetOrCreateManager<CommandRequestTrackerSystem>();
<# foreach (var commandDetails in commandDetailsList) { #>
                <#= commandDetails.CamelCaseName #>Storage = bookkeepingSystem.GetCommandStorageForType<CommandStorages.<#= commandDetails.CommandName#>>();
<# } #>
            }

            public override void Dispose()
            {
<# foreach (var fieldDetails in fieldDetailsList) { #>
<# if (!fieldDetails.IsBlittable) { #>
                <#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= fieldDetails.PascalCaseName #>Provider.CleanDataInWorld(World);
<# } #>
<# } #>
<# foreach (var eventDetails in eventDetailsList) { #>
                <#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= eventDetails.PascalCaseName #>Provider.CleanDataInWorld(World);
<# } #>
            }

            public override void OnAddComponent(AddComponentOp op)
            {
                if (!IsValidEntityId(op.EntityId, "AddComponentOp", out var entity))
                {
                    return;
                }

                var data = global::<#= qualifiedNamespace #>.<#= componentDetails.TypeName #>.Serialization.Deserialize(op.Data.SchemaData.Value.GetFields(), World);
                data.DirtyBit = false;
                entityManager.AddComponentData(entity, data);
                entityManager.AddComponentData(entity, new NotAuthoritative<<#= componentDetails.TypeName #>>());

                if (entityManager.HasComponent<ComponentRemoved<<#= componentDetails.TypeName #>>>(entity))
                {
                    entityManager.RemoveComponent<ComponentRemoved<<#= componentDetails.TypeName #>>>(entity);
                }
                else if (!entityManager.HasComponent<ComponentAdded<<#= componentDetails.TypeName #>>>(entity))
                {
                    entityManager.AddComponentData(entity, new ComponentAdded<<#= componentDetails.TypeName #>>());
                }
                else
                {
                    LogDispatcher.HandleLog(LogType.Error, new LogEvent(ReceivedDuplicateComponentAdded)
                        .WithField(LoggingUtils.LoggerName, LoggerName)
                        .WithField(LoggingUtils.EntityId, op.EntityId.Id)
                        .WithField("Component", "<#= componentDetails.TypeName #>")
                    );
                }
            }

            public override void OnRemoveComponent(RemoveComponentOp op)
            {
                if (!IsValidEntityId(op.EntityId, "RemoveComponentOp", out var entity))
                {
                    return;
                }
<# if (!componentDetails.IsBlittable) { #>

                var data = entityManager.GetComponentData<<#= componentDetails.TypeName #>>(entity);
<# foreach (var fieldDetails in fieldDetailsList) { #>
<# if (!fieldDetails.IsBlittable) { #>
                <#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= fieldDetails.PascalCaseName #>Provider.Free(data.<#= fieldDetails.CamelCaseName #>Handle);
<# } #>
<# } #>
<# } #>

                entityManager.RemoveComponent<<#= componentDetails.TypeName #>>(entity);

                if (entityManager.HasComponent<ComponentAdded<<#= componentDetails.TypeName #>>>(entity))
                {
                    entityManager.RemoveComponent<ComponentAdded<<#= componentDetails.TypeName #>>>(entity);
                }
                else if (!entityManager.HasComponent<ComponentRemoved<<#= componentDetails.TypeName #>>>(entity))
                {
                    entityManager.AddComponentData(entity, new ComponentRemoved<<#= componentDetails.TypeName #>>());
                }
                else
                {
                    LogDispatcher.HandleLog(LogType.Error, new LogEvent(ReceivedDuplicateComponentRemoved)
                        .WithField(LoggingUtils.LoggerName, LoggerName)
                        .WithField(LoggingUtils.EntityId, op.EntityId.Id)
                        .WithField("Component", "<#= componentDetails.TypeName #>")
                    );
                }
            }

            public override void OnComponentUpdate(ComponentUpdateOp op)
            {
                if (!IsValidEntityId(op.EntityId, "OnComponentUpdate", out var entity))
                {
                    return;
                }

                var data = entityManager.GetComponentData<<#= componentDetails.TypeName #>>(entity);

                var update = global::<#= qualifiedNamespace #>.<#= componentDetails.TypeName #>.Serialization.GetAndApplyUpdate(op.Update.SchemaData.Value.GetFields(), ref data);

                List<<#= componentDetails.TypeName #>.Update> updates;
                if (entityManager.HasComponent<<#= componentDetails.TypeName #>.ReceivedUpdates>(entity))
                {
                    updates = entityManager.GetComponentData<<#= componentDetails.TypeName #>.ReceivedUpdates>(entity).Updates;

                }
                else
                {
                    var updatesComponent = new <#= componentDetails.TypeName #>.ReceivedUpdates
                    {
                        handle = ReferenceTypeProviders.UpdatesProvider.Allocate(World)
                    };
                    ReferenceTypeProviders.UpdatesProvider.Set(updatesComponent.handle, new List<<#= componentDetails.TypeName #>.Update>());
                    updates = updatesComponent.Updates;
                    entityManager.AddComponentData(entity, updatesComponent);
                }

                updates.Add(update);

<# if (eventDetailsList.Count > 0) { #>
                var eventsObject = op.Update.SchemaData.Value.GetEvents();
<# foreach (var eventDetails in eventDetailsList) { #>
                {
                    var eventCount = eventsObject.GetObjectCount(<#= eventDetails.EventIndex #>);
                    if (eventCount > 0)
                    {
                        // Create component to hold received events
                        ReceivedEvents.<#= eventDetails.PascalCaseName #> eventsReceived;
                        List<<#= eventDetails.FullyQualifiedPayloadTypeName #>> eventList;
                        if (!entityManager.HasComponent<ReceivedEvents.<#= eventDetails.PascalCaseName #>>(entity))
                        {
                            eventsReceived = new ReceivedEvents.<#= eventDetails.PascalCaseName #>() {
                                handle = ReferenceTypeProviders.<#= eventDetails.PascalCaseName #>Provider.Allocate(World)
                            };
                            eventList = new List<<#= eventDetails.FullyQualifiedPayloadTypeName #>>((int) eventCount);
                            ReferenceTypeProviders.<#= eventDetails.PascalCaseName #>Provider.Set(eventsReceived.handle, eventList);
                            entityManager.AddComponentData(entity, eventsReceived);
                        }
                        else
                        {
                            eventsReceived = entityManager.GetComponentData<ReceivedEvents.<#= eventDetails.PascalCaseName #>>(entity);
                            eventList = eventsReceived.Events;
                        }

                        // Deserialize events onto component
                        for (var i = 0; i < eventCount; i++)
                        {
                            var e = <#= eventDetails.FullyQualifiedPayloadTypeName #>.Serialization.Deserialize(eventsObject.GetObject(<#= eventDetails.EventIndex #>));
                            eventList.Add(e);
                        }
                    }
                }

<# } #>
<# } #>
                data.DirtyBit = false;
                entityManager.SetComponentData(entity, data);
            }

            public override void OnAuthorityChange(AuthorityChangeOp op)
            {
                if (!IsValidEntityId(op.EntityId, "AuthorityChangeOp", out var entity))
                {
                    return;
                }

                ApplyAuthorityChange(entity, op.Authority, op.EntityId);
            }

            public override void OnCommandRequest(CommandRequestOp op)
            {
                if (!IsValidEntityId(op.EntityId, "CommandRequestOp", out var entity))
                {
                    return;
                }

                var commandIndex = op.Request.SchemaData.Value.GetCommandIndex();
                switch (commandIndex)
                {
<# foreach(var commandDetails in commandDetailsList) { #>
                    case <#= commandDetails.CommandIndex #>:
                        On<#= commandDetails.CommandName #>Request(op);
                        break;
<# } #>
                    default:
                        LogDispatcher.HandleLog(LogType.Error, new LogEvent(CommandIndexNotFound)
                            .WithField(LoggingUtils.LoggerName, LoggerName)
                            .WithField(LoggingUtils.EntityId, op.EntityId.Id)
                            .WithField("CommandIndex", commandIndex)
                            .WithField("Component", "<#= componentDetails.TypeName #>")
                        );
                        break;
                }
            }

            public override void OnCommandResponse(CommandResponseOp op)
            {
                var commandIndex = op.Response.SchemaData.Value.GetCommandIndex();
                switch (commandIndex)
                {
<# foreach(var commandDetails in commandDetailsList) { #>
                    case <#= commandDetails.CommandIndex #>:
                        On<#= commandDetails.CommandName #>Response(op);
                        break;
<# } #>
                    default:
                        LogDispatcher.HandleLog(LogType.Error, new LogEvent(CommandIndexNotFound)
                            .WithField(LoggingUtils.LoggerName, LoggerName)
                            .WithField(LoggingUtils.EntityId, op.EntityId.Id)
                            .WithField("CommandIndex", commandIndex)
                            .WithField("Component", "<#= componentDetails.TypeName #>")
                        );
                        break;
                }
            }

            public override void AddCommandComponents(Unity.Entities.Entity entity)
            {
<# foreach (var commandDetails in commandDetailsList) { #>
                {
                    var commandSender = new <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.CommandSenders.<#= commandDetails.CommandName #>();
                    commandSender.CommandListHandle = <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= commandDetails.CommandName #>SenderProvider.Allocate(World);
                    commandSender.RequestsToSend = new List<<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.<#= commandDetails.CommandName #>.Request>();

                    entityManager.AddComponentData(entity, commandSender);

                    var commandResponder = new <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.CommandResponders.<#= commandDetails.CommandName #>();
                    commandResponder.CommandListHandle = <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= commandDetails.CommandName #>ResponderProvider.Allocate(World);
                    commandResponder.ResponsesToSend = new List<<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.<#= commandDetails.CommandName #>.Response>();

                    entityManager.AddComponentData(entity, commandResponder);
                }
<# } #>
            }

            private void ApplyAuthorityChange(Unity.Entities.Entity entity, Authority authority, global::Improbable.Worker.EntityId entityId)
            {
                switch (authority)
                {
                    case Authority.Authoritative:
                        if (!entityManager.HasComponent<NotAuthoritative<<#= componentDetails.TypeName #>>>(entity))
                        {
                            LogInvalidAuthorityTransition(Authority.Authoritative, Authority.NotAuthoritative, entityId);
                            return;
                        }

                        entityManager.RemoveComponent<NotAuthoritative<<#= componentDetails.TypeName #>>>(entity);
                        entityManager.AddComponentData(entity, new Authoritative<<#= componentDetails.TypeName #>>());

                        // Add event senders
<# foreach (var eventDetail in eventDetailsList) { #>
                        {
                            var eventSender = new EventSender.<#= eventDetail.PascalCaseName #>()
                            {
                                handle = ReferenceTypeProviders.<#= eventDetail.PascalCaseName #>Provider.Allocate(World)
                            };
                            ReferenceTypeProviders.<#= eventDetail.PascalCaseName #>Provider.Set(eventSender.handle, new List<<#= eventDetail.FullyQualifiedPayloadTypeName #>>());
                            entityManager.AddComponentData(entity, eventSender);
                        }
<# } #>
                        break;
                    case Authority.AuthorityLossImminent:
                        if (!entityManager.HasComponent<Authoritative<<#= componentDetails.TypeName #>>>(entity))
                        {
                            LogInvalidAuthorityTransition(Authority.AuthorityLossImminent, Authority.Authoritative, entityId);
                            return;
                        }

                        entityManager.AddComponentData(entity, new AuthorityLossImminent<<#= componentDetails.TypeName #>>());
                        break;
                    case Authority.NotAuthoritative:
                        if (!entityManager.HasComponent<Authoritative<<#= componentDetails.TypeName #>>>(entity))
                        {
                            LogInvalidAuthorityTransition(Authority.NotAuthoritative, Authority.Authoritative, entityId);
                            return;
                        }

                        if (entityManager.HasComponent<AuthorityLossImminent<<#= componentDetails.TypeName #>>>(entity))
                        {
                            entityManager.RemoveComponent<AuthorityLossImminent<<#= componentDetails.TypeName #>>>(entity);
                        }

                        entityManager.RemoveComponent<Authoritative<<#= componentDetails.TypeName #>>>(entity);
                        entityManager.AddComponentData(entity, new NotAuthoritative<<#= componentDetails.TypeName #>>());

                        // Remove event senders
<# foreach (var eventDetail in eventDetailsList) { #>
                        {
                            var eventSender = entityManager.GetComponentData<EventSender.<#= eventDetail.PascalCaseName #>>(entity);
                            ReferenceTypeProviders.<#= eventDetail.PascalCaseName #>Provider.Free(eventSender.handle);
                            entityManager.RemoveComponent<EventSender.<#= eventDetail.PascalCaseName #>>(entity);
                        }
<# } #>
                        break;
                }

                List<Authority> authorityChanges;
                if (entityManager.HasComponent<AuthorityChanges<<#= componentDetails.TypeName #>>>(entity))
                {
                    authorityChanges = entityManager.GetComponentData<AuthorityChanges<<#= componentDetails.TypeName #>>>(entity).Changes;

                }
                else
                {
                    var changes = new AuthorityChanges<<#= componentDetails.TypeName #>>
                    {
                        Handle = AuthorityChangesProvider.Allocate(World)
                    };
                    AuthorityChangesProvider.Set(changes.Handle, new List<Authority>());
                    authorityChanges = changes.Changes;
                    entityManager.AddComponentData(entity, changes);
                }

                authorityChanges.Add(authority);
            }

            private bool IsValidEntityId(global::Improbable.Worker.EntityId entityId, string opType, out Unity.Entities.Entity entity)
            {
                if (!MutableView.TryGetEntity(entityId, out entity))
                {
                    LogDispatcher.HandleLog(LogType.Error, new LogEvent(EntityNotFound)
                        .WithField(LoggingUtils.LoggerName, LoggerName)
                        .WithField(LoggingUtils.EntityId, entityId.Id)
                        .WithField("Op", opType)
                        .WithField("Component", "<#= componentDetails.TypeName #>")
                    );
                    return false;
                }

                return true;
            }

            private void LogInvalidAuthorityTransition(Authority newAuthority, Authority expectedOldAuthority, global::Improbable.Worker.EntityId entityId)
            {
                LogDispatcher.HandleLog(LogType.Error, new LogEvent(InvalidAuthorityChange)
                    .WithField(LoggingUtils.LoggerName, LoggerName)
                    .WithField(LoggingUtils.EntityId, entityId.Id)
                    .WithField("New Authority", newAuthority)
                    .WithField("Expected Old Authority", expectedOldAuthority)
                    .WithField("Component", "<#= componentDetails.TypeName #>")
                );
            }

<# foreach (var commandDetails in commandDetailsList) {
    var wrappedCommandRequestType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.{commandDetails.CommandName}.ReceivedRequest";
    var commandRequestBufferType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.CommandRequests.{commandDetails.CommandName}";

    var wrappedCommandResponseType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.{commandDetails.CommandName}.ReceivedResponse";
    var commandResponseBufferType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.CommandResponses.{commandDetails.CommandName}";

    var commandStorage = $"{commandDetails.CamelCaseName}Storage";
#>
            private void On<#= commandDetails.CommandName #>Request(CommandRequestOp op)
            {
                if (!IsValidEntityId(op.EntityId, "CommandRequestOp", out var entity))
                {
                    return;
                }

                var deserializedRequest = <#= commandDetails.RequestType #>.Serialization.Deserialize(op.Request.SchemaData.Value.GetObject());

                List<<#= wrappedCommandRequestType #>> requests;
                if (entityManager.HasComponent<<#= commandRequestBufferType #>>(entity))
                {
                    requests = entityManager.GetComponentData<<#= commandRequestBufferType #>>(entity).Requests;
                }
                else
                {
                    var data = new <#= commandRequestBufferType #>
                    {
                        CommandListHandle = <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= commandDetails.CommandName #>RequestsProvider.Allocate(World)
                    };
                    requests = data.Requests = new List<<#= wrappedCommandRequestType #>>();
                    entityManager.AddComponentData(entity, data);
                }

                requests.Add(new <#= wrappedCommandRequestType #>(op.RequestId.Id,
                    op.CallerWorkerId,
                    op.CallerAttributeSet,
                    deserializedRequest));
            }

            private void On<#= commandDetails.CommandName #>Response(CommandResponseOp op)
            {
                if (!<#= commandStorage #>.CommandRequestsInFlight.TryGetValue(op.RequestId.Id, out var requestBundle))
                {
                    throw new InvalidOperationException($"Could not find corresponding request for RequestId {op.RequestId.Id} and command <#= commandDetails.CommandName #>.");
                }

                var entity = requestBundle.Entity;
                <#= commandStorage #>.CommandRequestsInFlight.Remove(op.RequestId.Id);
                if (!entityManager.Exists(entity))
                {
                    LogDispatcher.HandleLog(LogType.Error, new LogEvent(EntityNotFound)
                        .WithField(LoggingUtils.LoggerName, LoggerName)
                        .WithField("Op", "CommandResponseOp - <#= commandDetails.CommandName #>")
                        .WithField("Component", "<#= componentDetails.TypeName #>")
                    );
                    return;
                }

                <#= commandDetails.ResponseType #>? response = null;
                if (op.StatusCode == StatusCode.Success)
                {
                    response = <#= commandDetails.ResponseType #>.Serialization.Deserialize(op.Response.SchemaData.Value.GetObject());
                }

                List<<#= wrappedCommandResponseType #>> responses;
                if (entityManager.HasComponent<<#= commandResponseBufferType #>>(entity))
                {
                    responses = entityManager.GetComponentData<<#= commandResponseBufferType #>>(entity).Responses;
                }
                else
                {
                    var data = new <#= commandResponseBufferType #>
                    {
                        CommandListHandle = <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= commandDetails.CommandName #>ResponsesProvider.Allocate(World)
                    };
                    responses = data.Responses = new List<<#= wrappedCommandResponseType #>>();
                    entityManager.AddComponentData(entity, data);
                }

                responses.Add(new <#= wrappedCommandResponseType #>(op.EntityId,
                    op.Message,
                    op.StatusCode,
                    response,
                    requestBundle.Request));
            }
<# } #>
        }

        public class ComponentReplicator : ComponentReplicationHandler
        {
            public override uint ComponentId => <#= componentDetails.ComponentId #>;

            public override ComponentType[] ReplicationComponentTypes => new ComponentType[] {
<# foreach (var eventDetail in eventDetailsList) { #>
                ComponentType.ReadOnly<EventSender.<#= eventDetail.EventName #>>(),
<# } #>
                ComponentType.Create<<#= componentDetails.TypeName #>>(),
                ComponentType.ReadOnly<Authoritative<<#= componentDetails.TypeName #>>>(),
                ComponentType.ReadOnly<SpatialEntityId>()
            };

            public override ComponentType[] CommandTypes => new ComponentType[] {
<# foreach (var commandDetails in commandDetailsList) { #>
                ComponentType.ReadOnly<<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.CommandSenders.<#= commandDetails.CommandName #>>(),
                ComponentType.ReadOnly<<#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.CommandResponders.<#= commandDetails.CommandName #>>(),
<# } #>
            };

<# foreach (var commandDetails in commandDetailsList) { #>
            private CommandStorages.<#= commandDetails.CommandName#> <#= commandDetails.CamelCaseName #>Storage;
<# } #>

            public ComponentReplicator(EntityManager entityManager, Unity.Entities.World world) : base(entityManager)
            {
                var bookkeepingSystem = world.GetOrCreateManager<CommandRequestTrackerSystem>();
<# foreach (var commandDetails in commandDetailsList) { #>
                <#= commandDetails.CamelCaseName #>Storage = bookkeepingSystem.GetCommandStorageForType<CommandStorages.<#= commandDetails.CommandName#>>();
<# } #>
            }

            public override void ExecuteReplication(ComponentGroup replicationGroup, global::Improbable.Worker.Core.Connection connection)
            {
                var entityIdDataArray = replicationGroup.GetComponentDataArray<SpatialEntityId>();
                var componentDataArray = replicationGroup.GetComponentDataArray<<#= componentDetails.TypeName #>>();
<# foreach (var eventDetail in eventDetailsList) { #>
                var event<#= eventDetail.EventName #>Array = replicationGroup.GetComponentDataArray<EventSender.<#= eventDetail.EventName #>>();
<# } #>

                for (var i = 0; i < componentDataArray.Length; i++)
                {
                    var data = componentDataArray[i];
                    var dirtyEvents = 0;
<# foreach (var eventDetail in eventDetailsList) { #>
                    var events<#= eventDetail.EventName #> = event<#= eventDetail.EventName #>Array[i].Events;
                    dirtyEvents += events<#= eventDetail.EventName #>.Count;
<# } #>

                    if (data.DirtyBit || dirtyEvents > 0)
                    {
                        var update = new global::Improbable.Worker.Core.SchemaComponentUpdate(<#= componentDetails.ComponentId #>);
                        <#= componentDetails.TypeName #>.Serialization.Serialize(data, update.GetFields());

<# if (eventDetailsList.Count > 0) { #>
                        // Serialize events
                        var eventsObject = update.GetEvents();
<# foreach (var eventDetail in eventDetailsList) { #>
                        if (events<#= eventDetail.EventName #>.Count > 0)
                        {
                            foreach (var e in events<#= eventDetail.EventName #>)
                            {
                                var obj = eventsObject.AddObject(<#= eventDetail.EventIndex #>);
                                <#= eventDetail.FullyQualifiedPayloadTypeName #>.Serialization.Serialize(e, obj);
                            }

                            events<#= eventDetail.EventName #>.Clear();
                        }

<# } #>
<# } #>
                        // Send serialized update over the wire
                        connection.SendComponentUpdate(entityIdDataArray[i].EntityId, new global::Improbable.Worker.Core.ComponentUpdate(update));

                        data.DirtyBit = false;
                        componentDataArray[i] = data;
                    }
                }
            }

            public override void SendCommands(List<ComponentGroup> commandComponentGroups, global::Improbable.Worker.Core.Connection connection)
            {
<#
for (var i = 0; i < commandDetailsList.Count; i++) {
    var commandDetails = commandDetailsList[i];
    var commandSenderType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.CommandSenders.{commandDetails.CommandName}";
    var commandResponderType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.CommandResponders.{commandDetails.CommandName}";
#>
                if (!commandComponentGroups[<#= 2*i #>].IsEmptyIgnoreFilter)
                {
                    var componentGroup = commandComponentGroups[<#= 2*i #>];
                    var commandSenderDataArray = componentGroup.GetComponentDataArray<<#= commandSenderType #>>();
                    var entityArray = componentGroup.GetEntityArray();

                    for (var j = 0; j < commandSenderDataArray.Length; j++)
                    {
                        var requests = commandSenderDataArray[j];
                        for (var k = 0; k < requests.RequestsToSend.Count; k++)
                        {
                            var wrappedCommandRequest = requests.RequestsToSend[k];

                            var schemaCommandRequest = new global::Improbable.Worker.Core.SchemaCommandRequest(ComponentId, <#= commandDetails.CommandIndex #>);
                            <#= commandDetails.RequestType #>.Serialization.Serialize(wrappedCommandRequest.RawRequest, schemaCommandRequest.GetObject());

                            var requestId = connection.SendCommandRequest(wrappedCommandRequest.TargetEntityId,
                                new global::Improbable.Worker.Core.CommandRequest(schemaCommandRequest),
                                wrappedCommandRequest.TimeoutMillis,
                                wrappedCommandRequest.AllowShortCircuiting ? ShortCircuitParameters : null);

                            <#= commandDetails.CamelCaseName #>Storage.CommandRequestsInFlight[requestId.Id] =
                                new CommandRequestStore<<#= commandDetails.RequestType #>>(entityArray[j], wrappedCommandRequest.RawRequest, null);
                        }

                        requests.RequestsToSend.Clear();
                    }
                }
                if (!commandComponentGroups[<#= 2*i + 1 #>].IsEmptyIgnoreFilter)
                {
                    var componentGroup = commandComponentGroups[<#= 2*i + 1 #>];
                    var commandResponderDataArray = componentGroup.GetComponentDataArray<<#= commandResponderType #>>();

                    for (var j = 0; j < commandResponderDataArray.Length; j++)
                    {
                        var responses = commandResponderDataArray[j];
                        for (var k = 0; k < responses.ResponsesToSend.Count; k++)
                        {
                            var wrappedCommandResponse = responses.ResponsesToSend[k];
                            var requestId = new global::Improbable.Worker.Core.RequestId<IncomingCommandRequest>(wrappedCommandResponse.RequestId);

                            if (wrappedCommandResponse.FailureMessage != null)
                            {
                                // Send a command failure if the string is non-null.
                                connection.SendCommandFailure(requestId, wrappedCommandResponse.FailureMessage);
                                continue;
                            }

                            var schemaCommandResponse = new global::Improbable.Worker.Core.SchemaCommandResponse(ComponentId, <#= commandDetails.CommandIndex #>);
                            <#= commandDetails.ResponseType #>.Serialization.Serialize(wrappedCommandResponse.RawResponse.Value, schemaCommandResponse.GetObject());

                            connection.SendCommandResponse(requestId, new global::Improbable.Worker.Core.CommandResponse(schemaCommandResponse));
                        }

                        responses.ResponsesToSend.Clear();
                    }
                }
<# } #>
            }

        }

        public class ComponentCleanup : ComponentCleanupHandler
        {
            public override ComponentType[] CleanUpComponentTypes => new ComponentType[] {
                typeof(ComponentAdded<<#= componentDetails.TypeName #>>),
                typeof(ComponentRemoved<<#= componentDetails.TypeName #>>),
            };

            public override ComponentType[] EventComponentTypes => new ComponentType[] {
<# foreach (var eventDetails in eventDetailsList) { #>
                typeof(ReceivedEvents.<#= eventDetails.EventName #>),
<# } #>
            };

            public override ComponentType ComponentUpdateType => ComponentType.ReadOnly<<#= componentDetails.TypeName #>.ReceivedUpdates>();
            public override ComponentType AuthorityChangesType => ComponentType.ReadOnly<AuthorityChanges<<#= componentDetails.TypeName #>>>();

            public override ComponentType[] CommandReactiveTypes => new ComponentType[] {
<# foreach (var commandDetails in commandDetailsList) { #>
                ComponentType.ReadOnly<CommandRequests.<#= commandDetails.CommandName #>>(),
                ComponentType.ReadOnly<CommandResponses.<#= commandDetails.CommandName #>>(),
<# } #>
            };

            public override void CleanupUpdates(ComponentGroup updateGroup, ref EntityCommandBuffer buffer)
            {
                var entities = updateGroup.GetEntityArray();
                var data = updateGroup.GetComponentDataArray<<#= componentDetails.TypeName #>.ReceivedUpdates>();
                for (var i = 0; i < entities.Length; i++)
                {
                    buffer.RemoveComponent<<#= componentDetails.TypeName #>.ReceivedUpdates>(entities[i]);
                    ReferenceTypeProviders.UpdatesProvider.Free(data[i].handle);
                }
            }

            public override void CleanupAuthChanges(ComponentGroup authorityChangeGroup, ref EntityCommandBuffer buffer)
            {
                var entities = authorityChangeGroup.GetEntityArray();
                var data = authorityChangeGroup.GetComponentDataArray<AuthorityChanges<<#= componentDetails.TypeName #>>>();
                for (var i = 0; i < entities.Length; i++)
                {
                    buffer.RemoveComponent<AuthorityChanges<<#= componentDetails.TypeName #>>>(entities[i]);
                    AuthorityChangesProvider.Free(data[i].Handle);
                }
            }

            public override void CleanupEvents(ComponentGroup[] eventGroups, ref EntityCommandBuffer buffer)
            {
<# for (var i = 0; i < eventDetailsList.Count; i++) { #>
<# var eventDetails = eventDetailsList[i]; #>
                // Clean <#= eventDetails.EventName #>
                {
                    var group = eventGroups[<#= i #>];
                    if (!group.IsEmptyIgnoreFilter)
                    {
                        var entities = group.GetEntityArray();
                        var data = group.GetComponentDataArray<ReceivedEvents.<#= eventDetails.EventName #>>();
                        for (var i = 0; i < entities.Length; i++)
                        {
                            buffer.RemoveComponent<ReceivedEvents.<#= eventDetails.EventName #>>(entities[i]);
                            ReferenceTypeProviders.<#= eventDetails.EventName #>Provider.Free(data[i].handle);
                        }
                    }
                }
<# } #>
            }

            public override void CleanupCommands(ComponentGroup[] commandCleanupGroups, ref EntityCommandBuffer buffer)
            {
<#
for (var j = 0; j < commandDetailsList.Count; j++) {
    var commandDetails = commandDetailsList[j];
#>
                if (!commandCleanupGroups[<#= 2*j #>].IsEmptyIgnoreFilter)
                {
                    var requestsGroup = commandCleanupGroups[<#= 2*j #>];
                    var entities = requestsGroup.GetEntityArray();
                    var data = requestsGroup.GetComponentDataArray<CommandRequests.<#= commandDetails.CommandName #>>();
                    for (var i = 0; i < entities.Length; i++)
                    {
                        buffer.RemoveComponent<CommandRequests.<#= commandDetails.CommandName #>>(entities[i]);
                        ReferenceTypeProviders.<#= commandDetails.CommandName #>RequestsProvider.Free(data[i].CommandListHandle);
                    }
                }

                if (!commandCleanupGroups[<#= 2*j + 1 #>].IsEmptyIgnoreFilter)
                {
                    var responsesGroup = commandCleanupGroups[<#= 2*j + 1 #>];
                    var entities = responsesGroup.GetEntityArray();
                    var data = responsesGroup.GetComponentDataArray<CommandResponses.<#= commandDetails.CommandName #>>();
                    for (var i = 0; i < entities.Length; i++)
                    {
                        buffer.RemoveComponent<CommandResponses.<#= commandDetails.CommandName #>>(entities[i]);
                        ReferenceTypeProviders.<#= commandDetails.CommandName #>ResponsesProvider.Free(data[i].CommandListHandle);
                    }
                }
<# } #>
            }
        }
    }

}
