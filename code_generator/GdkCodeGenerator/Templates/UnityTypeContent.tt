<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var typeDetails = GetTypeDetails();
    var fieldDetailsList = GetFieldDetailsList();
#>

public struct <#= typeDetails.CapitalisedName #>
{
<# foreach (var fieldDetails in fieldDetailsList) { #>
    public <#= fieldDetails.Type #> <#= fieldDetails.PascalCaseName #>;
<# } #>

    public static class Serialization
    {
        public static void Serialize(<#= typeDetails.CapitalisedName #> instance, global::Improbable.Worker.Core.SchemaObject obj)
        {
<# foreach (var fieldDetails in fieldDetailsList) { #>
<# if (fieldDetails.SchemaTypeInfo.SingularTypeInfo.HasValue) { #>
<# var singularTypeInfo = fieldDetails.SchemaTypeInfo.SingularTypeInfo.Value; #>
<# if (singularTypeInfo.IsEnum) { #>
            obj.AddEnum(<#= fieldDetails.FieldNumber #>, (uint) instance.<#= fieldDetails.PascalCaseName #>);
<# } else if (singularTypeInfo.IsPrimitive) { #>
            obj.<#= singularTypeInfo.SerializationFunctions.Serialize #>(<#= fieldDetails.FieldNumber #>, instance.<#= fieldDetails.PascalCaseName #>);
<# } else { #>
            <#= singularTypeInfo.SerializationFunctions.Serialize #>(instance.<#= fieldDetails.PascalCaseName #>, obj.AddObject(<#= fieldDetails.FieldNumber #>));
<# } #>
<# } else if (fieldDetails.SchemaTypeInfo.ListTypeInfo.HasValue) { #>
<# var listTypeInfo = fieldDetails.SchemaTypeInfo.ListTypeInfo.Value; #>
            foreach (var value in instance.<#= fieldDetails.PascalCaseName #>)
            {
<# if (listTypeInfo.IsEnum) { #>
                obj.AddEnum(<#= fieldDetails.FieldNumber #>, (uint) value);
<# } else if (listTypeInfo.IsPrimitive) { #>
                obj.<#= listTypeInfo.SerializationFunctions.Serialize #>(<#= fieldDetails.FieldNumber #>, value);
<# } else { #>
                <#= listTypeInfo.SerializationFunctions.Serialize #>(value, obj.AddObject(<#= fieldDetails.FieldNumber #>));
<# } #>
            }
<# } else if (fieldDetails.SchemaTypeInfo.OptionTypeInfo.HasValue) { #>
<# var optionTypeInfo = fieldDetails.SchemaTypeInfo.OptionTypeInfo.Value; #>
            if (instance.<#= fieldDetails.PascalCaseName #>.HasValue)
            {
<# if (optionTypeInfo.IsEnum) { #>
                obj.AddEnum(<#= fieldDetails.PascalCaseName #>, (uint) instance.<#= fieldDetails.PascalCaseName #>.Value);
<# } else if (optionTypeInfo.IsPrimitive) { #>
                obj.<#= optionTypeInfo.SerializationFunctions.Serialize #>(<#= fieldDetails.FieldNumber #>, instance.<#= fieldDetails.PascalCaseName #>.Value);
<# } else { #>
                <#= optionTypeInfo.SerializationFunctions.Serialize #>(instance.<#= fieldDetails.PascalCaseName #>.Value, obj.AddObject(<#= fieldDetails.FieldNumber #>));
<# } #>
            }
<# } else { #>
<# var mapTypeInfo = fieldDetails.SchemaTypeInfo.MapTypeInfo; #>
            foreach (var keyValuePair in instance.<#= fieldDetails.PascalCaseName #>)
            {
                var mapObj = obj.AddObject(<#= fieldDetails.FieldNumber #>);
<# if (mapTypeInfo.Key.IsEnum) { #>
                mapObj.AddEnum(1, (uint) keyValuePair.Key);
<# } else if (mapTypeInfo.Key.IsPrimitive) { #>
                mapObj.<#= mapTypeInfo.Key.SerializationFunctions.Serialize #>(1, keyValuePair.Key);
<# } else { #>
                <#= mapTypeInfo.Key.SerializationFunctions.Serialize #>(keyValuePair.Key, mapObj.AddObject(1));
<# } #>
<# if (mapTypeInfo.Value.IsEnum) { #>
                mapObj.AddEnum(2, (uint) keyValuePair.Value);
<# } else if (mapTypeInfo.Value.IsPrimitive) { #>
                mapObj.<#= mapTypeInfo.Value.SerializationFunctions.Serialize #>(2, keyValuePair.Value);
<# } else { #>
                <#= mapTypeInfo.Value.SerializationFunctions.Serialize #>(keyValuePair.Value, mapObj.AddObject(2));
<# } #>
            }
<# } #>
<# } #>
        }

        public static <#= typeDetails.CapitalisedName #> Deserialize(global::Improbable.Worker.Core.SchemaObject obj)
        {
            var instance = new <#= typeDetails.CapitalisedName #>();
<# foreach (var fieldDetails in fieldDetailsList) { #>
<# if (fieldDetails.SchemaTypeInfo.SingularTypeInfo.HasValue) { #>
<# var singularTypeInfo = fieldDetails.SchemaTypeInfo.SingularTypeInfo.Value; #>
<# if (singularTypeInfo.IsEnum) { #>
            instance.<#= fieldDetails.PascalCaseName #> = (<#= fieldDetails.Type #>) obj.GetEnum(<#= fieldDetails.FieldNumber #>);
<# } else if (singularTypeInfo.IsPrimitive) { #>
            instance.<#= fieldDetails.PascalCaseName #> = obj.<#= singularTypeInfo.SerializationFunctions.Deserialize #>(<#= fieldDetails.FieldNumber #>);
<# } else { #>
            instance.<#= fieldDetails.PascalCaseName #> = <#= singularTypeInfo.SerializationFunctions.Deserialize #>(obj.GetObject(<#= fieldDetails.FieldNumber #>));
<# } #>
<# } else if (fieldDetails.SchemaTypeInfo.ListTypeInfo.HasValue) { #>
<# var listTypeInfo = fieldDetails.SchemaTypeInfo.ListTypeInfo.Value; #>
<# if (listTypeInfo.IsEnum) { #>
            for (var i = 0; i < obj.GetEnumCount(<#= fieldDetails.FieldNumber #>); i++)
            {
                instance.<#= fieldDetails.PascalCaseName #>.Add((<#= listTypeInfo.Type #>) obj.GetEnum(<#= fieldDetails.FieldNumber #>));
            }
<# } else if (listTypeInfo.IsPrimitive) { #>
            for (var i = 0; i < obj.<#= listTypeInfo.SerializationFunctions.GetCount #>(<#= fieldDetails.FieldNumber #>); i++)
            {
                instance.<#= fieldDetails.PascalCaseName #>.Add(obj.<#= listTypeInfo.SerializationFunctions.Deserialize #>(<#= fieldDetails.FieldNumber #>));
            }
<# } else { #>
            for (var i = 0; i < obj.GetObjectCount(<#= fieldDetails.FieldNumber #>); i++)
            {
                instance.<#= fieldDetails.PascalCaseName #>.Add(<#= listTypeInfo.SerializationFunctions.Deserialize #>(obj.GetObject(<#= fieldDetails.FieldNumber #>)));
            }
<# } #>

<# } else if (fieldDetails.SchemaTypeInfo.OptionTypeInfo.HasValue) { #>
<# var optionTypeInfo = fieldDetails.SchemaTypeInfo.OptionTypeInfo.Value; #>
<# if (optionTypeInfo.IsEnum) { #>
            if (obj.GetEnumCount(<#= fieldDetails.FieldNumber #>) == 1)
            {
                instance.<#= fieldDetails.PascalCaseName #> = (<#= optionTypeInfo.Type #>) obj.GetEnum(<#= fieldDetails.FieldNumber #>);
            }
<# } else if (optionTypeInfo.IsPrimitive) { #>
            if (obj.<#= optionTypeInfo.SerializationFunctions.GetCount #>(<#= fieldDetails.FieldNumber #>) == 1)
            {
                instance.<#= fieldDetails.PascalCaseName #> = obj.<#= optionTypeInfo.SerializationFunctions.Deserialize #>(<#= fieldDetails.FieldNumber #>);
            }
<# } else { #>
            if (obj.GetObjectCount(<#= fieldDetails.FieldNumber #>) == 1)
            {
                instance.<#= fieldDetails.PascalCaseName #> = <#= optionTypeInfo.SerializationFunctions.Deserialize #>(obj.GetObject(<#= fieldDetails.FieldNumber #>));
            }
<# } #>
<# } else { #>
<# var mapTypeInfo = fieldDetails.SchemaTypeInfo.MapTypeInfo; #>
            {
                var mapSize = obj.GetObjectCount(<#= fieldDetails.FieldNumber #>);
                for (var i = 0; i < mapSize; i++)
                {
                    var mapObj = obj.GetObject(<#= fieldDetails.FieldNumber #>);
<# if (mapTypeInfo.Key.IsEnum) { #>
                    var key = (<#= mapTypeInfo.Key.Type #>) mapObj.GetEnum(1);
<# } else if (mapTypeInfo.Key.IsPrimitive) { #>
                    var key = mapObj.<#= mapTypeInfo.Key.SerializationFunctions.Deserialize #>(1);
<# } else { #>
                    var key = <#= mapTypeInfo.Key.SerializationFunctions.Deserialize #>(mapObj.GetObject(1));
<# } #>
<# if (mapTypeInfo.Value.IsEnum) { #>
                    var value = (<#= mapTypeInfo.Value.Type #>) mapObj.GetEnum(2);
<# } else if (mapTypeInfo.Value.IsPrimitive) { #>
                    var value = mapObj.<#= mapTypeInfo.Value.SerializationFunctions.Deserialize #>(2);
<# } else { #>
                    var value = <#= mapTypeInfo.Value.SerializationFunctions.Deserialize #>(mapObj.GetObject(2));
<# } #>
                    instance.<#= fieldDetails.PascalCaseName #>.Add(key, value);
                }
            }
<# } #>
<# } #>
            return instance;
        }
    }
<#
    var typeGenerator = new UnityTypeContent();
    foreach (var nestedType in nestedTypes)
    {
#>

    <#= CommonGeneratorUtils.IndentEveryNewline(typeGenerator.Generate(nestedType, enumSet)) #>
<# } #>
<#
    var enumGenerator = new UnityEnumContent();
    foreach (var nestedEnum in nestedEnums)
    {
#>

    <#= CommonGeneratorUtils.IndentEveryNewline(enumGenerator.Generate(nestedEnum)) #>
<# } #>
}
