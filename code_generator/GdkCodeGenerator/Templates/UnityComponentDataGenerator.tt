<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
#>
<#= generatedHeader #>

using Unity.Entities;
using Improbable.Gdk.Core;
using Improbable.Gdk.Core.MonoBehaviours;
using Improbable.Worker;
using Entity = Unity.Entities.Entity;

namespace <#= qualifiedNamespace #>
{ 
    public struct <#= componentDetails.TypeName #> : IComponentData, ISpatialComponentData
    {
        public BlittableBool DirtyBit { get; set; }
<# foreach(var fieldDetails in fieldDetailsList) { #>

        private <#= fieldDetails.Type #> <#= fieldDetails.CamelCaseName #>;

        public <#= fieldDetails.Type #> <#= fieldDetails.PascalCaseName #>
        {
            get { return <#= fieldDetails.CamelCaseName #>; }
            set
            {
                DirtyBit = true;
                <#= fieldDetails.CamelCaseName #> = value;
            }
        }
<# } #>

<# if (fieldDetailsList.Count > 0) { #>
        public struct Update : ISpatialComponentUpdate
        {
<# foreach(var fieldDetails in fieldDetailsList) { #>
            public Option<<#= fieldDetails.Type #>> <#= fieldDetails.PascalCaseName #>;
<# } #>
        }
<# } #>

        public class Reader : IReaderInternal
        {
            public Reader(Entity entity, EntityManager entityManager, ILogDispatcher logDispatcher)
            {
            }

            void IReaderInternal.OnAuthorityChange(Authority authority)
            {
                throw new System.NotImplementedException();
            }

            void IReaderInternal.OnComponentUpdate()
            {
                throw new System.NotImplementedException();
            }
            
            void IReaderInternal.OnEvent(int eventIndex)
            {
                throw new System.NotImplementedException();
            }

            void IReaderInternal.OnCommandRequest(int commandIndex)
            {
                throw new System.NotImplementedException();
            }
        }
    }
}
