<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentDetails = GetComponentDetails();
    var fieldDetailsList = GetFieldDetailsList();
    var eventDetailsList = GetEventDetailsList();
    var commandDetailsList = GetCommandDetailsList();
#>
<#= generatedHeader #>

using Unity.Entities;
using Improbable.Gdk.Core;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        internal class GameObjectComponentDispatcher : GameObjectComponentDispatcherBase
        {
            public override ComponentType[] ComponentAddedComponentTypes => new ComponentType[]
            {
                ComponentType.ReadOnly<ComponentAdded<<#= componentDetails.TypeName #>>>(), ComponentType.ReadOnly<GameObjectReference>()
            };

            public override ComponentType[] ComponentRemovedComponentTypes => new ComponentType[]
            {
                ComponentType.ReadOnly<ComponentRemoved<<#= componentDetails.TypeName #>>>(), ComponentType.ReadOnly<GameObjectReference>()
            };

            public override ComponentType[] AuthoritiesChangedComponentTypes => new ComponentType[]
            {
                ComponentType.ReadOnly<AuthoritiesChanged<<#= componentDetails.TypeName #>>>(), ComponentType.ReadOnly<GameObjectReference>()
            };

            public override ComponentType[] ComponentsUpdatedComponentTypes => new ComponentType[]
            {
<# if (fieldDetailsList.Count > 0) { #>
                ComponentType.ReadOnly<ComponentsUpdated<<#= componentDetails.TypeName #>.Update>>(), ComponentType.ReadOnly<GameObjectReference>()
<# } #>
            };

            public override ComponentType[][] EventsReceivedComponentTypeArrays => new ComponentType[][]
            {
<# foreach(var eventDetails in eventDetailsList) { #>
                new ComponentType[] { ComponentType.ReadOnly<EventsReceived<<#= eventDetails.EventName #>Event>>(), ComponentType.ReadOnly<GameObjectReference>() },
<# } #>
            };

            public override ComponentType[][] CommandRequestsComponentTypeArrays => new ComponentType[][]
            {
<# foreach(var commandDetails in commandDetailsList) { #>
                new ComponentType[] { ComponentType.ReadOnly<CommandRequests<<#= commandDetails.CommandName #>.Request>>(), ComponentType.ReadOnly<GameObjectReference>() },
<# } #>
            };

            protected override uint GetComponentId()
            {
                return <#= unityComponentDefinition.Id #>;
            }

            public override void InvokeOnComponentUpdateUserCallbacks(GameObjectDispatcherSystem gameObjectDispatcherSystem)
            {
<# if (fieldDetailsList.Count > 0) { #>
                var entities = ComponentsUpdatedComponentGroup.GetEntityArray();
                var updateLists = ComponentsUpdatedComponentGroup.GetComponentArray<ComponentsUpdated<<#= componentDetails.TypeName #>.Update>>();
                for (var i = 0; i < entities.Length; i++)
                {
                    var readers = gameObjectDispatcherSystem.GetSpatialOSBehaviourManager(entities[i].Index)
                        .GetReadersWriters(<#= unityComponentDefinition.Id #>);
                    if (readers == null)
                    {
                        continue;
                    }

                    var updateList = updateLists[i];
                    foreach (var reader in readers)
                    {
                        foreach (var update in updateList.Buffer)
                        {
                            ((<#= componentDetails.ComponentName #>.ReaderWriterImpl) reader).OnComponentUpdate(update);
                        }
                    }
                }
<# } #>
            }

            public override void InvokeOnEventUserCallbacks(GameObjectDispatcherSystem gameObjectDispatcherSystem)
            {
<# for (var j = 0; j < eventDetailsList.Count; j++) { #>
                {
                    var entities = EventsReceivedComponentGroups[<#= j #>].GetEntityArray();
                    var eventLists = EventsReceivedComponentGroups[<#= j #>].GetComponentArray<EventsReceived<<#= eventDetailsList[j].EventName #>Event>>();
                    for (var i = 0; i < entities.Length; i++)
                    {
                        var readers = gameObjectDispatcherSystem.GetSpatialOSBehaviourManager(entities[i].Index)
                            .GetReadersWriters(<#= unityComponentDefinition.Id #>);
                        var eventList = eventLists[i];
                        if (readers == null)
                        {
                            continue;
                        }

                        foreach (var reader in readers)
                        {
                            foreach (var e in eventList.Buffer)
                            {
                                ((<#= componentDetails.ComponentName #>.ReaderWriterImpl) reader).On<#= eventDetailsList[j].EventName #>Event(e);
                            }
                        }
                    }
                }
<# } #>
            }

            public override void InvokeOnCommandRequestUserCallbacks(GameObjectDispatcherSystem gameObjectDispatcherSystem)
            {
<# for (var j = 0; j < commandDetailsList.Count; j++) { #>
                {
                    var entities = CommandRequestsComponentGroups[<#= j #>].GetEntityArray();
                    var commandLists = CommandRequestsComponentGroups[<#= j #>].GetComponentArray<CommandRequests<<#= commandDetailsList[j].CommandName #>.Request>>();
                    for (var i = 0; i < entities.Length; i++)
                    {
                        var readers = gameObjectDispatcherSystem.GetSpatialOSBehaviourManager(entities[i].Index)
                            .GetReadersWriters(<#= unityComponentDefinition.Id #>);
                        if (readers == null)
                        {
                            continue;
                        }

                        var commandList = commandLists[i];
                        foreach (var reader in readers)
                        {
                            foreach (var req in commandList.Buffer)
                            {
                                ((<#= componentDetails.ComponentName #>.ReaderWriterImpl) reader).On<#= commandDetailsList[j].CommandName #>CommandRequest(req);
                            }
                        }
                    }
                }
<# } #>
            }

            public override void InvokeOnAuthorityChangeLifecycleCallbacks(GameObjectDispatcherSystem gameObjectDispatcherSystem)
            {
                var authoritiesChangedTags = AuthoritiesChangedComponentGroup.GetComponentArray<AuthoritiesChanged<<#= componentDetails.TypeName #>>>();
                var entities = AuthoritiesChangedComponentGroup.GetEntityArray();
                for (var i = 0; i < entities.Length; i++)
                {
                    var spatialOSBehaviourManager = gameObjectDispatcherSystem.GetSpatialOSBehaviourManager(entities[i].Index);
                    for (var j = 0; j < authoritiesChangedTags[i].Buffer.Count; j++)
                    {
                        spatialOSBehaviourManager.ChangeAuthority(<#= unityComponentDefinition.Id #>, authoritiesChangedTags[i].Buffer[j]);
                    }
                }
            }

            public override void InvokeOnAuthorityChangeUserCallbacks(GameObjectDispatcherSystem gameObjectDispatcherSystem)
            {
                var entities = AuthoritiesChangedComponentGroup.GetEntityArray();
                var authChangeLists = AuthoritiesChangedComponentGroup.GetComponentArray<AuthoritiesChanged<<#= componentDetails.TypeName #>>>();
                for (var i = 0; i < entities.Length; i++)
                {
                    var readers = gameObjectDispatcherSystem.GetSpatialOSBehaviourManager(entities[i].Index)
                        .GetReadersWriters(<#= unityComponentDefinition.Id #>);
                    if (readers == null)
                    {
                        continue;
                    }

                    var authChanges = authChangeLists[i];
                    foreach (var reader in readers)
                    {
                        foreach (var auth in authChanges.Buffer)
                        {
                            ((<#= componentDetails.ComponentName #>.ReaderWriterImpl) reader).OnAuthorityChange(auth);
                        }
                    }
                }
            }
        }
    }
}
