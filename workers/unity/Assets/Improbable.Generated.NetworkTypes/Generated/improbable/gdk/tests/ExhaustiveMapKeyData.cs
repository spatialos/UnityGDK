// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable.gdk.tests.ExhaustiveMapKeyData in improbable/gdk/tests/exhaustive_test.schema.

namespace Improbable.Gdk.Tests
{

public partial struct ExhaustiveMapKeyData : global::System.IEquatable<ExhaustiveMapKeyData>, global::Improbable.Collections.IDeepCopyable<ExhaustiveMapKeyData>
{
  /// <summary>
  /// Field field2 = 2.
  /// </summary>
  public global::Improbable.Collections.Map<float, string> field2;
  /// <summary>
  /// Field field4 = 4.
  /// </summary>
  public global::Improbable.Collections.Map<int, string> field4;
  /// <summary>
  /// Field field5 = 5.
  /// </summary>
  public global::Improbable.Collections.Map<long, string> field5;
  /// <summary>
  /// Field field6 = 6.
  /// </summary>
  public global::Improbable.Collections.Map<double, string> field6;
  /// <summary>
  /// Field field7 = 7.
  /// </summary>
  public global::Improbable.Collections.Map<string, string> field7;
  /// <summary>
  /// Field field8 = 8.
  /// </summary>
  public global::Improbable.Collections.Map<uint, string> field8;
  /// <summary>
  /// Field field9 = 9.
  /// </summary>
  public global::Improbable.Collections.Map<ulong, string> field9;
  /// <summary>
  /// Field field10 = 10.
  /// </summary>
  public global::Improbable.Collections.Map<int, string> field10;
  /// <summary>
  /// Field field11 = 11.
  /// </summary>
  public global::Improbable.Collections.Map<long, string> field11;
  /// <summary>
  /// Field field12 = 12.
  /// </summary>
  public global::Improbable.Collections.Map<uint, string> field12;
  /// <summary>
  /// Field field13 = 13.
  /// </summary>
  public global::Improbable.Collections.Map<ulong, string> field13;
  /// <summary>
  /// Field field14 = 14.
  /// </summary>
  public global::Improbable.Collections.Map<int, string> field14;
  /// <summary>
  /// Field field15 = 15.
  /// </summary>
  public global::Improbable.Collections.Map<long, string> field15;
  /// <summary>
  /// Field field16 = 16.
  /// </summary>
  public global::Improbable.Collections.Map<global::Improbable.EntityId, string> field16;
  /// <summary>
  /// Field field17 = 17.
  /// </summary>
  public global::Improbable.Collections.Map<global::Improbable.Gdk.Tests.SomeType, string> field17;

  public ExhaustiveMapKeyData(
      global::Improbable.Collections.Map<float, string> field2,
      global::Improbable.Collections.Map<int, string> field4,
      global::Improbable.Collections.Map<long, string> field5,
      global::Improbable.Collections.Map<double, string> field6,
      global::Improbable.Collections.Map<string, string> field7,
      global::Improbable.Collections.Map<uint, string> field8,
      global::Improbable.Collections.Map<ulong, string> field9,
      global::Improbable.Collections.Map<int, string> field10,
      global::Improbable.Collections.Map<long, string> field11,
      global::Improbable.Collections.Map<uint, string> field12,
      global::Improbable.Collections.Map<ulong, string> field13,
      global::Improbable.Collections.Map<int, string> field14,
      global::Improbable.Collections.Map<long, string> field15,
      global::Improbable.Collections.Map<global::Improbable.EntityId, string> field16,
      global::Improbable.Collections.Map<global::Improbable.Gdk.Tests.SomeType, string> field17)
  {
    this.field2 = field2;
    this.field4 = field4;
    this.field5 = field5;
    this.field6 = field6;
    this.field7 = field7;
    this.field8 = field8;
    this.field9 = field9;
    this.field10 = field10;
    this.field11 = field11;
    this.field12 = field12;
    this.field13 = field13;
    this.field14 = field14;
    this.field15 = field15;
    this.field16 = field16;
    this.field17 = field17;
  }

  public static ExhaustiveMapKeyData Create()
  {
    var _result = new ExhaustiveMapKeyData();
    _result.field2 = new global::Improbable.Collections.Map<float, string>();
    _result.field4 = new global::Improbable.Collections.Map<int, string>();
    _result.field5 = new global::Improbable.Collections.Map<long, string>();
    _result.field6 = new global::Improbable.Collections.Map<double, string>();
    _result.field7 = new global::Improbable.Collections.Map<string, string>();
    _result.field8 = new global::Improbable.Collections.Map<uint, string>();
    _result.field9 = new global::Improbable.Collections.Map<ulong, string>();
    _result.field10 = new global::Improbable.Collections.Map<int, string>();
    _result.field11 = new global::Improbable.Collections.Map<long, string>();
    _result.field12 = new global::Improbable.Collections.Map<uint, string>();
    _result.field13 = new global::Improbable.Collections.Map<ulong, string>();
    _result.field14 = new global::Improbable.Collections.Map<int, string>();
    _result.field15 = new global::Improbable.Collections.Map<long, string>();
    _result.field16 = new global::Improbable.Collections.Map<global::Improbable.EntityId, string>();
    _result.field17 = new global::Improbable.Collections.Map<global::Improbable.Gdk.Tests.SomeType, string>();
    return _result;
  }

  public ExhaustiveMapKeyData DeepCopy()
  {
    var _result = new ExhaustiveMapKeyData();
    _result.field2 = field2.DeepCopy();
    _result.field4 = field4.DeepCopy();
    _result.field5 = field5.DeepCopy();
    _result.field6 = field6.DeepCopy();
    _result.field7 = field7.DeepCopy();
    _result.field8 = field8.DeepCopy();
    _result.field9 = field9.DeepCopy();
    _result.field10 = field10.DeepCopy();
    _result.field11 = field11.DeepCopy();
    _result.field12 = field12.DeepCopy();
    _result.field13 = field13.DeepCopy();
    _result.field14 = field14.DeepCopy();
    _result.field15 = field15.DeepCopy();
    _result.field16 = field16.DeepCopy();
    _result.field17 = field17.DeepCopy();
    return _result;

  }

  public override bool Equals(object _obj)
  {
    return _obj is ExhaustiveMapKeyData && Equals((ExhaustiveMapKeyData) _obj);
  }

  public static bool operator==(ExhaustiveMapKeyData a, ExhaustiveMapKeyData b)
  {
    return a.Equals(b);
  }

  public static bool operator!=(ExhaustiveMapKeyData a, ExhaustiveMapKeyData b)
  {
    return !a.Equals(b);
  }

  public bool Equals(ExhaustiveMapKeyData _obj)
  {
    return
        field2 == _obj.field2 &&
        field4 == _obj.field4 &&
        field5 == _obj.field5 &&
        field6 == _obj.field6 &&
        field7 == _obj.field7 &&
        field8 == _obj.field8 &&
        field9 == _obj.field9 &&
        field10 == _obj.field10 &&
        field11 == _obj.field11 &&
        field12 == _obj.field12 &&
        field13 == _obj.field13 &&
        field14 == _obj.field14 &&
        field15 == _obj.field15 &&
        field16 == _obj.field16 &&
        field17 == _obj.field17;
  }

  public override int GetHashCode()
  {
    int _result = 1327;
    _result = (_result * 977) + (field2 == null ? 0 : field2.GetHashCode());
    _result = (_result * 977) + (field4 == null ? 0 : field4.GetHashCode());
    _result = (_result * 977) + (field5 == null ? 0 : field5.GetHashCode());
    _result = (_result * 977) + (field6 == null ? 0 : field6.GetHashCode());
    _result = (_result * 977) + (field7 == null ? 0 : field7.GetHashCode());
    _result = (_result * 977) + (field8 == null ? 0 : field8.GetHashCode());
    _result = (_result * 977) + (field9 == null ? 0 : field9.GetHashCode());
    _result = (_result * 977) + (field10 == null ? 0 : field10.GetHashCode());
    _result = (_result * 977) + (field11 == null ? 0 : field11.GetHashCode());
    _result = (_result * 977) + (field12 == null ? 0 : field12.GetHashCode());
    _result = (_result * 977) + (field13 == null ? 0 : field13.GetHashCode());
    _result = (_result * 977) + (field14 == null ? 0 : field14.GetHashCode());
    _result = (_result * 977) + (field15 == null ? 0 : field15.GetHashCode());
    _result = (_result * 977) + (field16 == null ? 0 : field16.GetHashCode());
    _result = (_result * 977) + (field17 == null ? 0 : field17.GetHashCode());
    return _result;
  }
}

public static class ExhaustiveMapKeyData_Internal
{
  public static unsafe void Write(global::Improbable.Worker.Internal.GcHandlePool _pool,
                                  ExhaustiveMapKeyData _data, global::Improbable.Worker.Internal.Pbio.Object* _obj)
  {
    if (_data.field2 != null)
    {
      for (var _node = _data.field2.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 2);
        {
          global::Improbable.Worker.Internal.Pbio.AddFloat(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field4 != null)
    {
      for (var _node = _data.field4.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 4);
        {
          global::Improbable.Worker.Internal.Pbio.AddInt32(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field5 != null)
    {
      for (var _node = _data.field5.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 5);
        {
          global::Improbable.Worker.Internal.Pbio.AddInt64(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field6 != null)
    {
      for (var _node = _data.field6.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 6);
        {
          global::Improbable.Worker.Internal.Pbio.AddDouble(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field7 != null)
    {
      for (var _node = _data.field7.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 7);
        {
          if (_node.Value.Key != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Key);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 1, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 1, null, 0);
          }
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field8 != null)
    {
      for (var _node = _data.field8.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 8);
        {
          global::Improbable.Worker.Internal.Pbio.AddUint32(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field9 != null)
    {
      for (var _node = _data.field9.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 9);
        {
          global::Improbable.Worker.Internal.Pbio.AddUint64(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field10 != null)
    {
      for (var _node = _data.field10.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 10);
        {
          global::Improbable.Worker.Internal.Pbio.AddSint32(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field11 != null)
    {
      for (var _node = _data.field11.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 11);
        {
          global::Improbable.Worker.Internal.Pbio.AddSint64(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field12 != null)
    {
      for (var _node = _data.field12.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 12);
        {
          global::Improbable.Worker.Internal.Pbio.AddFixed32(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field13 != null)
    {
      for (var _node = _data.field13.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 13);
        {
          global::Improbable.Worker.Internal.Pbio.AddFixed64(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field14 != null)
    {
      for (var _node = _data.field14.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 14);
        {
          global::Improbable.Worker.Internal.Pbio.AddSfixed32(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field15 != null)
    {
      for (var _node = _data.field15.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 15);
        {
          global::Improbable.Worker.Internal.Pbio.AddSfixed64(_pair, 1, _node.Value.Key);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field16 != null)
    {
      for (var _node = _data.field16.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 16);
        {
          global::Improbable.Worker.Internal.Pbio.AddInt64(_pair, 1, _node.Value.Key.Id);
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
    if (_data.field17 != null)
    {
      for (var _node = _data.field17.First; _node != null; _node = _node.Next)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.AddObject(_obj, 17);
        {
          global::Improbable.Gdk.Tests.SomeType_Internal.Write(_pool, _node.Value.Key, global::Improbable.Worker.Internal.Pbio.AddObject(_pair, 1));
        }
        {
          if (_node.Value.Value != null)
          {
            var _buffer = global::System.Text.Encoding.UTF8.GetBytes(_node.Value.Value);
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, (byte*) _pool.Pin(_buffer), (uint) _buffer.Length);
          }
          else
          {
            global::Improbable.Worker.Internal.Pbio.AddBytes(_pair, 2, null, 0);
          }
        }
      }
    }
  }

  public static unsafe ExhaustiveMapKeyData Read(global::Improbable.Worker.Internal.Pbio.Object* _obj)
  {
    ExhaustiveMapKeyData _data;
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 2);
      _data.field2 = new global::Improbable.Collections.Map<float, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 2, _i);
        _data.field2.Add(global::Improbable.Worker.Internal.Pbio.GetFloat(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 4);
      _data.field4 = new global::Improbable.Collections.Map<int, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 4, _i);
        _data.field4.Add(global::Improbable.Worker.Internal.Pbio.GetInt32(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 5);
      _data.field5 = new global::Improbable.Collections.Map<long, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 5, _i);
        _data.field5.Add(global::Improbable.Worker.Internal.Pbio.GetInt64(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 6);
      _data.field6 = new global::Improbable.Collections.Map<double, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 6, _i);
        _data.field6.Add(global::Improbable.Worker.Internal.Pbio.GetDouble(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 7);
      _data.field7 = new global::Improbable.Collections.Map<string, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 7, _i);
        _data.field7.Add(global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 1), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 1)).BackingArray), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 8);
      _data.field8 = new global::Improbable.Collections.Map<uint, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 8, _i);
        _data.field8.Add(global::Improbable.Worker.Internal.Pbio.GetUint32(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 9);
      _data.field9 = new global::Improbable.Collections.Map<ulong, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 9, _i);
        _data.field9.Add(global::Improbable.Worker.Internal.Pbio.GetUint64(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 10);
      _data.field10 = new global::Improbable.Collections.Map<int, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 10, _i);
        _data.field10.Add(global::Improbable.Worker.Internal.Pbio.GetSint32(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 11);
      _data.field11 = new global::Improbable.Collections.Map<long, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 11, _i);
        _data.field11.Add(global::Improbable.Worker.Internal.Pbio.GetSint64(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 12);
      _data.field12 = new global::Improbable.Collections.Map<uint, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 12, _i);
        _data.field12.Add(global::Improbable.Worker.Internal.Pbio.GetFixed32(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 13);
      _data.field13 = new global::Improbable.Collections.Map<ulong, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 13, _i);
        _data.field13.Add(global::Improbable.Worker.Internal.Pbio.GetFixed64(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 14);
      _data.field14 = new global::Improbable.Collections.Map<int, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 14, _i);
        _data.field14.Add(global::Improbable.Worker.Internal.Pbio.GetSfixed32(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 15);
      _data.field15 = new global::Improbable.Collections.Map<long, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 15, _i);
        _data.field15.Add(global::Improbable.Worker.Internal.Pbio.GetSfixed64(_pair, 1), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 16);
      _data.field16 = new global::Improbable.Collections.Map<global::Improbable.EntityId, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 16, _i);
        _data.field16.Add(new global::Improbable.EntityId(global::Improbable.Worker.Internal.Pbio.GetInt64(_pair, 1)), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    {
      var _count = global::Improbable.Worker.Internal.Pbio.GetObjectCount(_obj, 17);
      _data.field17 = new global::Improbable.Collections.Map<global::Improbable.Gdk.Tests.SomeType, string>((int) _count);
      for (uint _i = 0; _i < _count; ++_i)
      {
        var _pair = global::Improbable.Worker.Internal.Pbio.IndexObject(_obj, 17, _i);
        _data.field17.Add(global::Improbable.Gdk.Tests.SomeType_Internal.Read(global::Improbable.Worker.Internal.Pbio.GetObject(_pair, 1)), global::System.Text.Encoding.UTF8.GetString(global::Improbable.Worker.Bytes.CopyOf(global::Improbable.Worker.Internal.Pbio.GetBytes(_pair, 2), global::Improbable.Worker.Internal.Pbio.GetBytesLength(_pair, 2)).BackingArray));
      }
    }
    return _data;
  }
}

}
