<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var eventDetailsList = GetEventDetailsList();
    var componentNamespace = qualifiedNamespace + "." + componentDetails.ComponentName;
#>
<#= generatedHeader #>

using Improbable.Gdk.Core;
using Improbable.Worker.CInterop;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public class DiffComponentDeserializer : IComponentDiffDeserializer
        {
            public uint GetComponentId()
            {
                return ComponentId;
            }

            public void AddUpdateToDiff(ComponentUpdateOp op, ViewDiff diff, uint updateId)
            {
                var update = <#= componentNamespace #>.Serialization.DeserializeUpdate(op.Update.SchemaData.Value);
                diff.AddComponentUpdate(update, op.EntityId, op.Update.ComponentId, updateId);
<# if (eventDetailsList.Count > 0) { #>
                var eventsObject = op.Update.SchemaData.Value.GetEvents();
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>

                {
                    var eventCount = eventsObject.GetObjectCount(<#= ev.EventIndex #>);
                    if (eventCount > 0)
                    {
                        for (uint i = 0; i < eventCount; i++)
                        {
                            var payload = <#= ev.FqnPayloadType #>.Serialization.Deserialize(eventsObject.IndexObject(<#= ev.EventIndex #>, i));
                            var e = new <#= eventType #>(payload);
                            diff.AddEvent(e, op.EntityId, op.Update.ComponentId, updateId);
                        }
                    }
                }
<# } #>
<# } #>
            }

            public void AddComponentToDiff(AddComponentOp op, ViewDiff diff)
            {
                var data = Serialization.DeserializeUpdate(op.Data.SchemaData.Value);
                diff.AddComponent(data, op.EntityId, op.Data.ComponentId);
            }
        }
    }
}
