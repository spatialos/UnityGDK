<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var commandDetailsList = GetCommandDetailsList();
#>
<#= generatedHeader #>

using Unity.Mathematics;
using Unity.Entities;
using Improbable.Gdk.Core;
using Improbable.Worker.CInterop;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
<# foreach (var command in commandDetailsList) {
        var receivedRequestType = command.CommandName + ".ReceivedRequest";
        var receivedResponseType = command.CommandName + ".RawReceivedResponse";
#>
        public class <#= command.CommandName #>DiffCommandDeserializer : ICommandDiffDeserializer
        {
            public uint GetComponentId()
            {
                return ComponentId;
            }

            public uint GetCommandId()
            {
                return <#= command.CommandIndex #>;
            }

            public void AddRequest(CommandRequestOp op, ViewDiff diff)
            {
                var deserializedRequest = <#= command.FqnRequestType #>.Serialization.Deserialize(op.Request.SchemaData.Value.GetObject());

                var request = new <#= receivedRequestType #>(
                    new EntityId(op.EntityId),
                    op.RequestId,
                    op.CallerWorkerId,
                    op.CallerAttributeSet,
                    deserializedRequest);

                diff.AddCommandRequest(request, ComponentId, <#= command.CommandIndex #>);
            }

            public void AddResponse(CommandResponseOp op, ViewDiff diff)
            {
                <#= command.FqnResponseType #>? rawResponse = null;
                if (op.StatusCode == StatusCode.Success)
                {
                    rawResponse = <#= command.FqnResponseType #>.Serialization.Deserialize(op.Response.SchemaData.Value.GetObject());
                }

                var response = new <#= receivedResponseType #>(
                    new EntityId(op.EntityId),
                    op.Message,
                    op.StatusCode,
                    rawResponse,
                    (long) op.RequestId);

                diff.AddCommandResponse(response, ComponentId, <#= command.CommandIndex #>);
            }
        }

<# } #>
    }
}
