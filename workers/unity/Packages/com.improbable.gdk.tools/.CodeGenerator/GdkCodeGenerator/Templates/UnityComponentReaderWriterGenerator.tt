<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var eventDetailsList = GetEventDetailsList();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentNamespace = qualifiedNamespace + "." + componentDetails.ComponentName;
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using Improbable.Worker;
using Improbable.Worker.Core;
using Improbable.Gdk.Core;
using Improbable.Gdk.Subscriptions;
using Unity.Entities;
using Entity = Unity.Entities.Entity;

namespace <#= qualifiedNamespace #>
{
    [AutoRegisterSubscriptionManager]
    public class <#= componentDetails.ComponentName #>ReaderSubscriptionManager : SubscriptionManager<<#= componentDetails.ComponentName #>Reader>
    {
        private readonly Dispatcher dispatcher;
        private readonly EntityManager entityManager;
        private readonly World world;
        private readonly WorkerSystem workerSystem;

        private readonly <#= componentDetails.ComponentName #>ReaderCallbackManager readerCallbackManager;

        private Dictionary<EntityId, HashSet<Subscription<<#= componentDetails.ComponentName #>Reader>>> entityIdToReaderSubscriptions;

        private HashSet<EntityId> entitiesMatchingRequirements = new HashSet<EntityId>();
        private HashSet<EntityId> entitiesNotMatchingRequirements = new HashSet<EntityId>();

        public <#= componentDetails.ComponentName #>ReaderSubscriptionManager(World world)
        {
            this.world = world;
            entityManager = world.GetOrCreateManager<EntityManager>();

            // Check that these are there
            dispatcher = world.GetExistingManager<SpatialOSReceiveSystem>().Dispatcher;
            workerSystem = world.GetExistingManager<WorkerSystem>();

            readerCallbackManager = new <#= componentDetails.ComponentName #>ReaderCallbackManager(dispatcher);

            dispatcher.OnAddComponent(op =>
            {
                // Should replace this with an other indexed dispatcher if it becomes a problem
                if (op.Data.ComponentId != <#= componentDetails.ComponentName #>.ComponentId)
                {
                    return;
                }

                if (!entitiesNotMatchingRequirements.Contains(op.EntityId))
                {
                    return;
                }

                workerSystem.TryGetEntity(op.EntityId, out var entity);

                foreach (var subscription in entityIdToReaderSubscriptions[op.EntityId])
                {
                    subscription.SetAvailable(new <#= componentDetails.ComponentName #>Reader(world, entity, op.EntityId, readerCallbackManager));
                }

                entitiesMatchingRequirements.Add(op.EntityId);
                entitiesNotMatchingRequirements.Remove(op.EntityId);
            });

            dispatcher.OnRemoveComponent(op =>
            {
                // Should replace this with an other indexed dispatcher if it becomes a problem
                if (op.ComponentId != <#= componentDetails.ComponentName #>.ComponentId)
                {
                    return;
                }

                if (!entitiesMatchingRequirements.Contains(op.EntityId))
                {
                    return;
                }

                workerSystem.TryGetEntity(op.EntityId, out var entity);

                foreach (var subscription in entityIdToReaderSubscriptions[op.EntityId])
                {
                    ResetValue(subscription);
                    subscription.SetUnavailable();
                }

                entitiesNotMatchingRequirements.Add(op.EntityId);
                entitiesMatchingRequirements.Remove(op.EntityId);
            });
        }

        public override Subscription<<#= componentDetails.ComponentName #>Reader> Subscribe(EntityId entityId)
        {
            if (entityIdToReaderSubscriptions == null)
            {
                entityIdToReaderSubscriptions = new Dictionary<EntityId, HashSet<Subscription<<#= componentDetails.ComponentName #>Reader>>>();
            }

            var subscription = new Subscription<<#= componentDetails.ComponentName #>Reader>(this, entityId);

            if (!entityIdToReaderSubscriptions.TryGetValue(entityId, out var subscriptions))
            {
                subscriptions = new HashSet<Subscription<<#= componentDetails.ComponentName #>Reader>>();
                entityIdToReaderSubscriptions.Add(entityId, subscriptions);
            }

            if (workerSystem.TryGetEntity(entityId, out var entity)
                && entityManager.HasComponent<<#= componentDetails.ComponentName #>.Component>(entity))
            {
                entitiesMatchingRequirements.Add(entityId);
                subscription.SetAvailable(new <#= componentDetails.ComponentName #>Reader(world, entity, entityId, readerCallbackManager));
            }
            else
            {
                entitiesNotMatchingRequirements.Add(entityId);
            }

            subscriptions.Add(subscription);
            return subscription;
        }

        public override void Cancel(ITypeErasedSubscription subscription)
        {
            var sub = ((Subscription<<#= componentDetails.ComponentName #>Reader>) subscription);
            if (sub.HasValue)
            {
                var reader = sub.Value;
                reader.IsValid = false;
                reader.RemoveAllCallbacks();
            }

            var subscriptions = entityIdToReaderSubscriptions[sub.EntityId];
            subscriptions.Remove(sub);
            if (subscriptions.Count == 0)
            {
                entityIdToReaderSubscriptions.Remove(sub.EntityId);
                entitiesMatchingRequirements.Remove(sub.EntityId);
                entitiesNotMatchingRequirements.Remove(sub.EntityId);
            }
        }

        public override void ResetValue(ITypeErasedSubscription subscription)
        {
            var sub = ((Subscription<<#= componentDetails.ComponentName #>Reader>) subscription);
            if (sub.HasValue)
            {
                sub.Value.RemoveAllCallbacks();
            }
        }
    }

    [AutoRegisterSubscriptionManager]
    public class <#= componentDetails.ComponentName #>WriterSubscriptionManager : SubscriptionManager<<#= componentDetails.ComponentName #>Writer>
    {
        private readonly Dispatcher dispatcher;
        private readonly EntityManager entityManager;
        private readonly World world;
        private readonly WorkerSystem workerSystem;

        private readonly <#= componentDetails.ComponentName #>ReaderCallbackManager readerCallbackManager;

        private Dictionary<EntityId, HashSet<Subscription<<#= componentDetails.ComponentName #>Writer>>> entityIdToWriterSubscriptions;

        private HashSet<EntityId> entitiesMatchingRequirements = new HashSet<EntityId>();
        private HashSet<EntityId> entitiesNotMatchingRequirements = new HashSet<EntityId>();

        public <#= componentDetails.ComponentName #>WriterSubscriptionManager(World world)
        {
            this.world = world;
            entityManager = world.GetOrCreateManager<EntityManager>();

            // Check that these are there
            dispatcher = world.GetExistingManager<SpatialOSReceiveSystem>().Dispatcher;
            workerSystem = world.GetExistingManager<WorkerSystem>();

            readerCallbackManager = new <#= componentDetails.ComponentName #>ReaderCallbackManager(dispatcher);

            dispatcher.OnAuthorityChange(op =>
            {
                // Should replace this with an other indexed dispatcher if it becomes a problem
                if (op.ComponentId != <#= componentDetails.ComponentName #>.ComponentId)
                {
                    return;
                }

                if (op.Authority == Authority.Authoritative)
                {
                    if (!entitiesNotMatchingRequirements.Contains(op.EntityId))
                    {
                        return;
                    }

                    workerSystem.TryGetEntity(op.EntityId, out var entity);

                    foreach (var subscription in entityIdToWriterSubscriptions[op.EntityId])
                    {
                        subscription.SetAvailable(new <#= componentDetails.ComponentName #>Writer(world, entity, op.EntityId, readerCallbackManager));
                    }

                    entitiesMatchingRequirements.Add(op.EntityId);
                    entitiesNotMatchingRequirements.Remove(op.EntityId);
                }
                else if (op.Authority == Authority.NotAuthoritative)
                {
                    // Should replace this with an other indexed dispatcher if it becomes a problem
                    if (op.ComponentId != <#= componentDetails.ComponentName #>.ComponentId)
                    {
                        return;
                    }

                    if (!entitiesMatchingRequirements.Contains(op.EntityId))
                    {
                        return;
                    }

                    workerSystem.TryGetEntity(op.EntityId, out var entity);

                    foreach (var subscription in entityIdToWriterSubscriptions[op.EntityId])
                    {
                        ResetValue(subscription);
                        subscription.SetUnavailable();
                    }

                    entitiesNotMatchingRequirements.Add(op.EntityId);
                    entitiesMatchingRequirements.Remove(op.EntityId);
                }
            });
        }

        public override Subscription<<#= componentDetails.ComponentName #>Writer> Subscribe(EntityId entityId)
        {
            if (entityIdToWriterSubscriptions == null)
            {
                entityIdToWriterSubscriptions = new Dictionary<EntityId, HashSet<Subscription<<#= componentDetails.ComponentName #>Writer>>>();
            }

            var subscription = new Subscription<<#= componentDetails.ComponentName #>Writer>(this, entityId);

            if (!entityIdToWriterSubscriptions.TryGetValue(entityId, out var subscriptions))
            {
                subscriptions = new HashSet<Subscription<<#= componentDetails.ComponentName #>Writer>>();
                entityIdToWriterSubscriptions.Add(entityId, subscriptions);
            }

            if (workerSystem.TryGetEntity(entityId, out var entity)
                && entityManager.HasComponent<Authoritative<<#= componentDetails.ComponentName #>.Component>>(entity))
            {
                entitiesMatchingRequirements.Add(entityId);
                subscription.SetAvailable(new <#= componentDetails.ComponentName #>Writer(world, entity, entityId, readerCallbackManager));
            }
            else
            {
                entitiesNotMatchingRequirements.Add(entityId);
            }

            subscriptions.Add(subscription);
            return subscription;
        }

        public override void Cancel(ITypeErasedSubscription subscription)
        {
            var sub = ((Subscription<<#= componentDetails.ComponentName #>Writer>) subscription);
            if (sub.HasValue)
            {
                var reader = sub.Value;
                reader.IsValid = false;
                reader.RemoveAllCallbacks();
            }

            var subscriptions = entityIdToWriterSubscriptions[sub.EntityId];
            subscriptions.Remove(sub);
            if (subscriptions.Count == 0)
            {
                entityIdToWriterSubscriptions.Remove(sub.EntityId);
                entitiesMatchingRequirements.Remove(sub.EntityId);
                entitiesNotMatchingRequirements.Remove(sub.EntityId);
            }
        }

        public override void ResetValue(ITypeErasedSubscription subscription)
        {
            var sub = ((Subscription<<#= componentDetails.ComponentName #>Writer>) subscription);
            if (sub.HasValue)
            {
                sub.Value.RemoveAllCallbacks();
            }
        }
    }

    public class <#= componentDetails.ComponentName #>ReaderCallbackManager
    {
        private Dispatcher dispatcher;

        private ulong callbacksRegistered = 1;

        private IndexedCallbacks<Authority> authorityCallbacks;
        private IndexedCallbacks<<#= componentDetails.ComponentName #>.Update> updateCallbacks;
<# foreach(var fieldDetails in fieldDetailsList) { #>

        private IndexedCallbacks<<#= fieldDetails.Type #>> <#= fieldDetails.CamelCaseName #>UpdateCallbacks;
<# } #>
<# foreach(var eventDetails in eventDetailsList) { #>

        private IndexedCallbacks<<#= eventDetails.FqnPayloadType #>> <#= eventDetails.CamelCaseEventName #>EventCallbacks;
<# } #>

        public <#= componentDetails.ComponentName #>ReaderCallbackManager(Dispatcher dispatcher)
        {
            this.dispatcher = dispatcher;

            dispatcher.OnComponentUpdate(op =>
            {
                // Should replace this with an other indexed dispatcher if it becomes a problem
                // This one is most likely to as there are lots of updates.
                // Although it's easy enough to just do this with all of them
                if (op.Update.ComponentId != <#= componentDetails.ComponentName #>.ComponentId)
                {
                    return;
                }

                var update = <#= componentDetails.ComponentName #>.Serialization.DeserializeUpdate(op.Update.SchemaData.Value);
                updateCallbacks?.InvokeAll(op.EntityId.Id, update);
<# foreach(var fieldDetails in fieldDetailsList) { #>

                if (<#= fieldDetails.CamelCaseName #>UpdateCallbacks != null && update.<#= fieldDetails.PascalCaseName #>.HasValue)
                {
                    <#= fieldDetails.CamelCaseName #>UpdateCallbacks.InvokeAll(op.EntityId.Id, update.<#= fieldDetails.PascalCaseName #>.Value);
                }
<# } #>

<# if (eventDetailsList.Count > 0) { #>
                var eventsObject = op.Update.SchemaData.Value.GetEvents();
<# foreach (var eventDetails in eventDetailsList) { #>
                if (<#= eventDetails.CamelCaseEventName #>EventCallbacks != null)
                {
                    var eventCount = eventsObject.GetObjectCount(<#= eventDetails.EventIndex #>);
                    for (uint i = 0; i < eventCount; i++)
                    {
                        var e = <#= eventDetails.FqnPayloadType #>.Serialization.Deserialize(eventsObject.IndexObject(<#= eventDetails.EventIndex #>, i));
                        <#= eventDetails.CamelCaseEventName #>EventCallbacks.InvokeAll(op.EntityId.Id, e);
                    }
                }
<# } #>
<# } #>
            });

            dispatcher.OnAuthorityChange(op =>
            {
                if (op.ComponentId != <#= componentDetails.ComponentName #>.ComponentId)
                {
                    return;
                }

                if (authorityCallbacks == null)
                {
                    return;
                }

                if (op.Authority == Authority.Authoritative)
                {
                    authorityCallbacks?.InvokeAll(op.EntityId.Id, op.Authority);
                }
                else
                {
                    authorityCallbacks?.InvokeAllReverse(op.EntityId.Id, op.Authority);
                }
            });
        }

        // Authority callbacks
        internal ulong RegisterAuthorityCallback(EntityId entityId, Action<Authority> callback)
        {
            if (authorityCallbacks == null)
            {
                authorityCallbacks = new IndexedCallbacks<Authority>();
            }

            authorityCallbacks.Add(entityId.Id, callbacksRegistered, callback);
            return callbacksRegistered++;
        }

        internal bool UnregisterAuthorityCallback(ulong callbackKey)
        {
            if (authorityCallbacks == null)
            {
                return false;
            }

            return authorityCallbacks.Remove(callbackKey);
        }

        // Component update callbacks
        internal ulong RegisterUpdateCallback(EntityId entityId, Action<<#= componentDetails.ComponentName #>.Update> callback)
        {
            if (updateCallbacks == null)
            {
                updateCallbacks = new IndexedCallbacks<<#= componentDetails.ComponentName #>.Update>();
            }

            updateCallbacks.Add(entityId.Id, callbacksRegistered, callback);
            return callbacksRegistered++;
        }

        internal bool UnregisterUpdateCallback(ulong callbackKey)
        {
            if (updateCallbacks == null)
            {
                return false;
            }

            return updateCallbacks.Remove(callbackKey);
        }

<# foreach(var fieldDetails in fieldDetailsList) { #>

        // <#= fieldDetails.PascalCaseName #> callbacks
        internal ulong Register<#= fieldDetails.PascalCaseName #>UpdateCallback(EntityId entityId, Action<<#= fieldDetails.Type #>> callback)
        {
            if (<#= fieldDetails.CamelCaseName #>UpdateCallbacks == null)
            {
                <#= fieldDetails.CamelCaseName #>UpdateCallbacks = new IndexedCallbacks<<#= fieldDetails.Type #>>();
            }

            <#= fieldDetails.CamelCaseName #>UpdateCallbacks.Add(entityId.Id, callbacksRegistered, callback);
            return callbacksRegistered++;
        }

        internal bool Unregister<#= fieldDetails.PascalCaseName #>UpdateCallback(ulong callbackKey)
        {
            if (<#= fieldDetails.CamelCaseName #>UpdateCallbacks == null)
            {
                return false;
            }

            return <#= fieldDetails.CamelCaseName #>UpdateCallbacks.Remove(callbackKey);
        }
<# } #>
<# foreach(var eventDetails in eventDetailsList) { #>

        internal ulong Register<#= eventDetails.EventName #>EventCallback(EntityId entityId, Action<<#= eventDetails.FqnPayloadType #>> callback)
        {
            if (<#= eventDetails.CamelCaseEventName #>EventCallbacks == null)
            {
                <#= eventDetails.CamelCaseEventName #>EventCallbacks = new IndexedCallbacks<<#= eventDetails.FqnPayloadType #>>();
            }

            <#= eventDetails.CamelCaseEventName #>EventCallbacks.Add(entityId.Id, callbacksRegistered, callback);
            return callbacksRegistered++;
        }

        internal bool Unregister<#= eventDetails.EventName #>EventCallback(ulong callbackKey)
        {
            if (<#= eventDetails.CamelCaseEventName #>EventCallbacks == null)
            {
                return false;
            }

            return <#= eventDetails.CamelCaseEventName #>EventCallbacks.Remove(callbackKey);
        }
<# } #>
    }

    public class <#= componentDetails.ComponentName #>Reader
    {
        public bool IsValid;

        protected readonly EntityManager EntityManager;
        protected readonly Entity Entity;

        private readonly EntityId entityId;

        private readonly <#= componentDetails.ComponentName #>ReaderCallbackManager manager;

        public <#= componentDetails.ComponentName #>.Component Data
        {
            get
            {
                if (!IsValid)
                {
                    throw new InvalidOperationException("Oh noes!");
                }

                return EntityManager.GetComponentData<<#= componentDetails.ComponentName #>.Component>(Entity);
            }
        }

        public Authority Authority
        {
            get
            {
                if (!IsValid)
                {
                    throw new InvalidOperationException("Oh noes!");
                }

                if (EntityManager.HasComponent<AuthorityLossImminent<<#= componentDetails.ComponentName #>.Component>>(Entity))
                {
                    return Authority.AuthorityLossImminent;
                }

                if (EntityManager.HasComponent<Authoritative<<#= componentDetails.ComponentName #>.Component>>(Entity))
                {
                    return Authority.Authoritative;
                }

                if (EntityManager.HasComponent<NotAuthoritative<<#= componentDetails.ComponentName #>.Component>>(Entity))
                {
                    return Authority.NotAuthoritative;
                }

                throw new InvalidOperationException("What did you do?");
            }
        }

        private Dictionary<Action<Authority>, ulong> authorityCallbackToCallbackKey;
        public event Action<Authority> OnAuthorityUpdate
        {
            add
            {
                if (authorityCallbackToCallbackKey == null)
                {
                    authorityCallbackToCallbackKey = new Dictionary<Action<Authority>, ulong>();
                }

                var key = manager.RegisterAuthorityCallback(entityId, value);
                authorityCallbackToCallbackKey.Add(value, key);
            }
            remove
            {
                if (!authorityCallbackToCallbackKey.TryGetValue(value, out var key))
                {
                    return;
                }

                manager.UnregisterAuthorityCallback(key);
                authorityCallbackToCallbackKey.Remove(value);
            }
        }

        private Dictionary<Action<<#= componentDetails.ComponentName #>.Update>, ulong> updateCallbackToCallbackKey;
        public event Action<<#= componentDetails.ComponentName #>.Update> OnUpdate
        {
            add
            {
                if (updateCallbackToCallbackKey == null)
                {
                    updateCallbackToCallbackKey = new Dictionary<Action<<#= componentDetails.ComponentName #>.Update>, ulong>();
                }

                var key = manager.RegisterUpdateCallback(entityId, value);
                updateCallbackToCallbackKey.Add(value, key);
            }
            remove
            {
                if (!updateCallbackToCallbackKey.TryGetValue(value, out var key))
                {
                    return;
                }

                manager.UnregisterUpdateCallback(key);
                updateCallbackToCallbackKey.Remove(value);
            }
        }
<# foreach(var fieldDetails in fieldDetailsList) { #>

        private Dictionary<Action<<#= fieldDetails.Type #>>, ulong> <#= fieldDetails.CamelCaseName #>UpdateCallbackToCallbackKey;
        public event Action<<#= fieldDetails.Type #>> On<#= fieldDetails.PascalCaseName #>Update
        {
            add
            {
                if (<#= fieldDetails.CamelCaseName #>UpdateCallbackToCallbackKey == null)
                {
                    <#= fieldDetails.CamelCaseName #>UpdateCallbackToCallbackKey = new Dictionary<Action<<#= fieldDetails.Type #>>, ulong>();
                }

                var key = manager.Register<#= fieldDetails.PascalCaseName #>UpdateCallback(entityId, value);
                <#= fieldDetails.CamelCaseName #>UpdateCallbackToCallbackKey.Add(value, key);
            }
            remove
            {
                if (!<#= fieldDetails.CamelCaseName #>UpdateCallbackToCallbackKey.TryGetValue(value, out var key))
                {
                    return;
                }

                manager.Unregister<#= fieldDetails.PascalCaseName #>UpdateCallback(key);
                <#= fieldDetails.CamelCaseName #>UpdateCallbackToCallbackKey.Remove(value);
            }
        }
<# } #>

<# foreach(var eventDetails in eventDetailsList) { #>

        private Dictionary<Action<<#= eventDetails.FqnPayloadType #>>, ulong> <#= eventDetails.CamelCaseEventName #>EventCallbackToCallbackKey;
        public event Action<<#= eventDetails.FqnPayloadType #>> On<#= eventDetails.EventName #>Event
        {
            add
            {
                if (<#= eventDetails.CamelCaseEventName #>EventCallbackToCallbackKey == null)
                {
                    <#= eventDetails.CamelCaseEventName #>EventCallbackToCallbackKey = new Dictionary<Action<<#= eventDetails.FqnPayloadType #>>, ulong>();
                }

                var key = manager.Register<#= eventDetails.EventName #>EventCallback(entityId, value);
                <#= eventDetails.CamelCaseEventName #>EventCallbackToCallbackKey.Add(value, key);
            }
            remove
            {
                if (!<#= eventDetails.CamelCaseEventName #>EventCallbackToCallbackKey.TryGetValue(value, out var key))
                {
                    return;
                }

                manager.Unregister<#= eventDetails.EventName #>EventCallback(key);
                <#= eventDetails.CamelCaseEventName #>EventCallbackToCallbackKey.Remove(value);
            }
        }
<# } #>

        internal <#= componentDetails.ComponentName #>Reader(World world, Entity entity, EntityId entityId,
            <#= componentDetails.ComponentName #>ReaderCallbackManager callbackManager)
        {
            this.Entity = entity;
            this.entityId = entityId;
            manager = callbackManager;

            IsValid = true;

            EntityManager = world.GetExistingManager<EntityManager>();
        }

        public void RemoveAllCallbacks()
        {
            if (authorityCallbackToCallbackKey != null)
            {
                foreach (var callbackToKey in authorityCallbackToCallbackKey)
                {
                    manager.UnregisterAuthorityCallback(callbackToKey.Value);
                }
            }

            if (updateCallbackToCallbackKey != null)
            {
                foreach (var callbackToKey in updateCallbackToCallbackKey)
                {
                    manager.UnregisterUpdateCallback(callbackToKey.Value);
                }
            }
<# foreach(var fieldDetails in fieldDetailsList) { #>

            if (<#= fieldDetails.CamelCaseName #>UpdateCallbackToCallbackKey != null)
            {
                foreach (var callbackToKey in <#= fieldDetails.CamelCaseName #>UpdateCallbackToCallbackKey)
                {
                    manager.Unregister<#= fieldDetails.PascalCaseName #>UpdateCallback(callbackToKey.Value);
                }
            }
<# } #>
<# foreach(var eventDetails in eventDetailsList) { #>

            if (<#= eventDetails.CamelCaseEventName #>EventCallbackToCallbackKey != null)
            {
                foreach (var callbackToKey in <#= eventDetails.CamelCaseEventName #>EventCallbackToCallbackKey)
                {
                    manager.Unregister<#= eventDetails.EventName #>EventCallback(callbackToKey.Value);
                }
            }
<# } #>
        }
    }

    public class <#= componentDetails.ComponentName #>Writer : <#= componentDetails.ComponentName #>Reader
    {
        internal <#= componentDetails.ComponentName #>Writer(World world, Entity entity, EntityId entityId,
            <#= componentDetails.ComponentName #>ReaderCallbackManager callbackManager) : base(world, entity, entityId, callbackManager)
        {
        }

        public void SendUpdate(<#= componentDetails.ComponentName #>.Update update)
        {
            var component = EntityManager.GetComponentData<<#= componentDetails.ComponentName #>.Component>(Entity);
<# foreach(var fieldDetails in fieldDetailsList) { #>

            if (update.<#= fieldDetails.PascalCaseName #>.HasValue)
            {
                component.<#= fieldDetails.PascalCaseName #> = update.<#= fieldDetails.PascalCaseName #>.Value;
            }
<# } #>

            EntityManager.SetComponentData(Entity, component);
        }

<# foreach (var eventDetails in eventDetailsList) { #>
        public void Send<#= eventDetails.EventName #>Event(<#= eventDetails.FqnPayloadType #> <#= eventDetails.CamelCaseEventName #>)
        {
            var eventSender = EntityManager.GetComponentData<<#= componentDetails.ComponentName #>.EventSender.<#= eventDetails.EventName #>>(Entity);
            eventSender.Events.Add(<#= eventDetails.CamelCaseEventName #>);
        }
<# } #>

        public void AcknowledgeAuthorityLoss()
        {
            var component = EntityManager.GetComponentData<AuthorityLossImminent<<#= componentDetails.ComponentName #>.Component>>(Entity);
            // depends on the auth loss pr
            // component.ackauthloss = true;

            EntityManager.SetComponentData(Entity, component);
        }
    }
}
