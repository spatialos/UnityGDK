<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var commandDetailsList = GetCommandDetailsList();
#>
<#= generatedHeader #>

using Improbable.Gdk.Core;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
<# foreach (var command in commandDetailsList) {
        var receivedRequestType = command.CommandName + ".ReceivedRequest";
        var receivedResponseType = command.CommandName + ".RawReceivedResponse";
#>
        public class Diff<#= command.CommandName #>CommandStorage : IDiffCommandRequestStorage<<#= receivedRequestType #>>, IDiffCommandResponseStorage<<#= receivedResponseType #>>
        {
            private MessageList<<#= receivedRequestType #>> requestStorage =
                new MessageList<<#= receivedRequestType #>>();

            private MessageList<<#= receivedResponseType #>> responseStorage =
                new MessageList<<#= receivedResponseType #>>();

            public uint GetComponentId()
            {
                return ComponentId;
            }

            public uint GetCommandId()
            {
                return <#= command.CommandIndex #>;
            }

            public void Clear()
            {
                requestStorage.Clear();
                responseStorage.Clear();
            }

            public void RemoveRequests(long entityId)
            {
                requestStorage.RemoveAll(request => request.EntityId.Id == entityId);
            }

            public void AddRequest(<#= receivedRequestType #> request)
            {
                requestStorage.Add(request);
            }

            public void AddResponse(<#= receivedResponseType #> response)
            {
                responseStorage.Add(response);
            }

            internal void SwapAndClearMessageLists(ref MessageList<<#= receivedRequestType #>> messageList)
            {
                MessageList<<#= receivedRequestType #>> temp = messageList;
                messageList = requestStorage;
                requestStorage = temp;
                requestStorage.Clear();
            }

            internal void SwapAndClearMessageLists(ref MessageList<<#= receivedResponseType #>> messageList)
            {
                MessageList<<#= receivedResponseType #>> temp = messageList;
                messageList = responseStorage;
                responseStorage = temp;
                responseStorage.Clear();
            }
        }

<# } #>
    }
}
