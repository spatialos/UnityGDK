<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var workerTypeList = GetWorkerTypes();
#>
<#= generatedHeader #>

using Improbable.Gdk.BuildSystem;
using Improbable.Gdk.BuildSystem.Configuration;
using Improbable.Gdk.Tools;
using UnityEditor;
using UnityEngine;

namespace Improbable
{ 
    internal static class BuildWorkerMenu
    {
        private const string LocalMenu = "Build for local";
        private const string CloudMenu = "Build for cloud";

        private static readonly string[] AllWorkers = 
        {
<# foreach (var workerType in workerTypeList) { #>
            "<#= workerType #>",
<# } #>
        };

<# 
for (var i = 0; i < workerTypeList.Count; i++) { 
var workerType = workerTypeList[i];
#>
        [MenuItem(EditorConfig.ParentMenu + "/" + LocalMenu + "/<#= workerType #>", false, EditorConfig.MenuOffset + <#=i #>)]
        public static void BuildLocal<#= workerType #>()
        {
            MenuBuild(BuildEnvironment.Local, "<#= workerType #>");
        }

        [MenuItem(EditorConfig.ParentMenu + "/" + CloudMenu + "/<#= workerType #>", false, EditorConfig.MenuOffset + <#= i #>)]
        public static void BuildCloud<#= workerType #>()
        {
            MenuBuild(BuildEnvironment.Cloud, "<#= workerType #>");
        }

<# } #>

        [MenuItem(EditorConfig.ParentMenu + "/" + LocalMenu + "/All workers", false, EditorConfig.MenuOffset + <#= workerTypeList.Count #>)]
        public static void BuildLocalAll()
        {
            MenuBuild(BuildEnvironment.Local, AllWorkers);
        }

        [MenuItem(EditorConfig.ParentMenu + "/" + CloudMenu + "/All workers", false, EditorConfig.MenuOffset + <#= workerTypeList.Count #>)]
        public static void BuildCloudAll()
        {
            MenuBuild(BuildEnvironment.Cloud, AllWorkers);
        }

        [MenuItem(EditorConfig.ParentMenu + "/Clean all workers", false, EditorConfig.MenuOffset + <#= workerTypeList.Count #>)]
        public static void Clean()
        {
            WorkerBuilder.Clean();
            Debug.Log("Clean completed");
        }
        
        private static void MenuBuild(BuildEnvironment environment, params string[] platforms)
        {
            // Delaying build by a frame to ensure the editor has re-rendered the UI to avoid odd glitches.
            EditorApplication.delayCall += () =>
            {
                LocalLaunch.BuildConfig();

                foreach (var platform in platforms)
                {
                    WorkerBuilder.BuildWorkerForEnvironment(platform, environment);
                }

                Debug.LogFormat("Completed build for {0} target", environment);
            };
        }
    }
}
