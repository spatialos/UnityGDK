<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var commandDetailsList = GetCommandDetailsList();
    var eventDetailsList = GetEventDetailsList();
    var componentNamespace = qualifiedNamespace + "." + componentDetails.ComponentName;
    var profilingStart = $"Profiler.BeginSample(\"{componentDetails.ComponentName}\");";
    var profilingEnd = "Profiler.EndSample();";
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using Unity.Entities;
using Unity.Collections;
using Improbable.Gdk.Core;
using Improbable.Gdk.Subscriptions;
using Improbable.Worker;
using Improbable.Worker.Core;
using Entity = Unity.Entities.Entity;

namespace <#= qualifiedNamespace #>
{
<# foreach (var commandDetails in commandDetailsList) {
    var receivedCommandRequestType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.{commandDetails.CommandName}.ReceivedRequest";
#>
    public class <#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandRequestCallbackManager : ICommandRequestCallbackManager
    {
        private readonly IndexedCallbacks<<#= receivedCommandRequestType #>> callbacks =
            new IndexedCallbacks<<#= receivedCommandRequestType #>>();

        private ulong nextCallbackId = 1;

        public void InvokeCallbacks(CommandSystem commandSystem)
        {
            var requests = commandSystem.GetRequests<<#= receivedCommandRequestType #>>();
            foreach (var request in requests)
            {
                callbacks.InvokeAll(request.EntityId.Id, request);
            }
        }

        public ulong RegisterCallback(EntityId entityId, Action<<#= receivedCommandRequestType #>> callback)
        {
            Action<<#= receivedCommandRequestType #>> wrappedCallback = response =>
            {
                callback(response);
                UnregisterCallback(nextCallbackId);
            };
            callbacks.Add(entityId.Id, nextCallbackId, wrappedCallback);
            return nextCallbackId++;
        }

        public bool UnregisterCallback(ulong callbackKey)
        {
            return callbacks.Remove(callbackKey);
        }
    }

<# } #>

<# foreach (var commandDetails in commandDetailsList) {
    var receivedCommandResponseType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.{commandDetails.CommandName}.ReceivedResponse";
#>
    public class <#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandResponseCallbackManager : ICommandResponseCallbackManager
    {
        private readonly IndexedCallbacks<<#= receivedCommandResponseType #>> callbacks =
            new IndexedCallbacks<<#= receivedCommandResponseType #>>();

        private ulong nextCallbackId = 1;

        public void InvokeCallbacks(CommandSystem commandSystem)
        {
            var responses = commandSystem.GetResponses<<#= receivedCommandResponseType #>>();
            foreach (var response in responses)
            {
                // todo should then remove all callbacks that have this request ID as they will never be called again
                callbacks.InvokeAll(response.RequestId, response);
            }
        }

        public ulong RegisterCallback(long requestId, Action<<#= receivedCommandResponseType #>> callback)
        {
            callbacks.Add(requestId, nextCallbackId, callback);
            return nextCallbackId++;
        }

        public bool UnregisterCallback(ulong callbackKey)
        {
            return callbacks.Remove(callbackKey);
        }
    }

<# } #>

    [AutoRegisterSubscriptionManager]
    public class <#= componentDetails.ComponentName #>CommandSenderSubscriptionManager : SubscriptionManager<<#= componentDetails.ComponentName #>CommandSender>
    {
        private readonly Dispatcher dispatcher;
        private readonly EntityManager entityManager;
        private readonly World world;
        private readonly WorkerSystem workerSystem;

        private Dictionary<EntityId, HashSet<Subscription<<#= componentDetails.ComponentName #>CommandSender>>>
            entityIdToSenderSubscriptions =
                new Dictionary<EntityId, HashSet<Subscription<<#= componentDetails.ComponentName #>CommandSender>>>();

        public <#= componentDetails.ComponentName #>CommandSenderSubscriptionManager(World world)
        {
            this.world = world;
            entityManager = world.GetOrCreateManager<EntityManager>();

            // Check that these are there
            dispatcher = world.GetExistingManager<SpatialOSReceiveSystem>().Dispatcher;
            workerSystem = world.GetExistingManager<WorkerSystem>();

            var callbackSystem = world.GetExistingManager<CommandCallbackSystem>();
<# foreach (var commandDetails in commandDetailsList) { #>
            callbackSystem.RegisterCommandResponseCallbackManager(
                typeof(<#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandResponseCallbackManager),
                new <#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandResponseCallbackManager());
<# } #>

            dispatcher.OnAddEntity(op =>
            {
                if (!entityIdToSenderSubscriptions.TryGetValue(op.EntityId, out var subscriptions))
                {
                    return;
                }

                foreach (var subscription in subscriptions)
                {
                    subscription.SetUnavailable();
                }
            });

            dispatcher.OnRemoveEntity(op =>
            {
                if (!entityIdToSenderSubscriptions.TryGetValue(op.EntityId, out var subscriptions))
                {
                    return;
                }

                workerSystem.TryGetEntity(op.EntityId, out var entity);
                foreach (var subscription in subscriptions)
                {
                    subscription.SetAvailable(new <#= componentDetails.ComponentName #>CommandSender(entity, world));
                }
            });
        }

        public override Subscription<<#= componentDetails.ComponentName #>CommandSender> Subscribe(EntityId entityId)
        {
            if (entityIdToSenderSubscriptions == null)
            {
                entityIdToSenderSubscriptions = new Dictionary<EntityId, HashSet<Subscription<<#= componentDetails.ComponentName #>CommandSender>>>();
            }

            var subscription = new Subscription<<#= componentDetails.ComponentName #>CommandSender>(this, entityId);

            if (!entityIdToSenderSubscriptions.TryGetValue(entityId, out var subscriptions))
            {
                subscriptions = new HashSet<Subscription<<#= componentDetails.ComponentName #>CommandSender>>();
                entityIdToSenderSubscriptions.Add(entityId, subscriptions);

                if (workerSystem.TryGetEntity(entityId, out var entity))
                {
                    subscription.SetAvailable(new <#= componentDetails.ComponentName #>CommandSender(entity, world));
                }
            }

            subscriptions.Add(subscription);
            return subscription;
        }

        public override void Cancel(EntityId entityId, ITypeErasedSubscription subscription)
        {
            var sub = ((Subscription<<#= componentDetails.ComponentName #>CommandSender>) subscription);
            // var reader = sub.Value;
            // reader.IsValid = false;
            // reader.RemoveAllCallbacks();

            var subscriptions = entityIdToSenderSubscriptions[entityId];
            subscriptions.Remove(sub);
            if (subscriptions.Count == 0)
            {
                entityIdToSenderSubscriptions.Remove(entityId);
            }
        }

        public override void Invalidate(EntityId entityId, ITypeErasedSubscription subscription)
        {
            var sub = ((Subscription<<#= componentDetails.ComponentName #>CommandSender>) subscription);
            if (sub.HasValue)
            {
                // var reader = sub.Value;
                // reader.IsValid = false;
                // reader.RemoveAllCallbacks();
            }
        }

        public override void Restore(EntityId entityId, ITypeErasedSubscription subscription)
        {
            var sub = ((Subscription<<#= componentDetails.ComponentName #>CommandSender>) subscription);
            if (sub.HasValue)
            {
                //sub.Value.IsValid = true;
            }
        }
    }

    [AutoRegisterSubscriptionManager]
    public class <#= componentDetails.ComponentName #>CommandReceiverSubscriptionManager : SubscriptionManager<<#= componentDetails.ComponentName #>CommandReceiver>
    {
        private readonly Dispatcher dispatcher;
        private readonly EntityManager entityManager;
        private readonly World world;
        private readonly WorkerSystem workerSystem;

        private Dictionary<EntityId, HashSet<Subscription<<#= componentDetails.ComponentName #>CommandReceiver>>> entityIdToReceiveSubscriptions;

        private HashSet<EntityId> entitiesMatchingRequirements = new HashSet<EntityId>();
        private HashSet<EntityId> entitiesNotMatchingRequirements = new HashSet<EntityId>();

        public <#= componentDetails.ComponentName #>CommandReceiverSubscriptionManager(World world)
        {
            this.world = world;
            entityManager = world.GetOrCreateManager<EntityManager>();

            // Check that these are there
            dispatcher = world.GetExistingManager<SpatialOSReceiveSystem>().Dispatcher;
            workerSystem = world.GetExistingManager<WorkerSystem>();

            var callbackSystem = world.GetExistingManager<CommandCallbackSystem>();
<# foreach (var commandDetails in commandDetailsList) { #>
            callbackSystem.RegisterCommandRequestCallbackManager(
                typeof(<#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandRequestCallbackManager),
                new <#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandRequestCallbackManager());
<# } #>

            dispatcher.OnAuthorityChange(op =>
            {
                // Should replace this with an other indexed dispatcher if it becomes a problem
                if (op.ComponentId != <#= componentDetails.ComponentName #>.ComponentId)
                {
                    return;
                }

                if (op.Authority == Authority.Authoritative)
                {
                    if (!entitiesNotMatchingRequirements.Contains(op.EntityId))
                    {
                        return;
                    }

                    workerSystem.TryGetEntity(op.EntityId, out var entity);

                    foreach (var subscription in entityIdToReceiveSubscriptions[op.EntityId])
                    {
                        subscription.SetAvailable(new <#= componentDetails.ComponentName #>CommandReceiver(world, entity, op.EntityId));
                    }

                    entitiesMatchingRequirements.Add(op.EntityId);
                    entitiesNotMatchingRequirements.Remove(op.EntityId);
                }
                else if (op.Authority == Authority.NotAuthoritative)
                {
                    // Should replace this with an other indexed dispatcher if it becomes a problem
                    if (op.ComponentId != <#= componentDetails.ComponentName #>.ComponentId)
                    {
                        return;
                    }

                    if (!entitiesMatchingRequirements.Contains(op.EntityId))
                    {
                        return;
                    }

                    workerSystem.TryGetEntity(op.EntityId, out var entity);

                    foreach (var subscription in entityIdToReceiveSubscriptions[op.EntityId])
                    {
                        subscription.SetUnavailable();
                    }

                    entitiesNotMatchingRequirements.Add(op.EntityId);
                    entitiesMatchingRequirements.Remove(op.EntityId);
                }
            });
        }

        public override Subscription<<#= componentDetails.ComponentName #>CommandReceiver> Subscribe(EntityId entityId)
        {
            if (entityIdToReceiveSubscriptions == null)
            {
                entityIdToReceiveSubscriptions = new Dictionary<EntityId, HashSet<Subscription<<#= componentDetails.ComponentName #>CommandReceiver>>>();
            }

            var subscription = new Subscription<<#= componentDetails.ComponentName #>CommandReceiver>(this, entityId);

            if (!entityIdToReceiveSubscriptions.TryGetValue(entityId, out var subscriptions))
            {
                subscriptions = new HashSet<Subscription<<#= componentDetails.ComponentName #>CommandReceiver>>();
                entityIdToReceiveSubscriptions.Add(entityId, subscriptions);

                if (workerSystem.TryGetEntity(entityId, out var entity))
                {
                    if (entityManager.HasComponent<Authoritative<<#= componentDetails.ComponentName #>.Component>>(entity))
                    {
                        entitiesMatchingRequirements.Add(entityId);
                        subscription.SetAvailable(new <#= componentDetails.ComponentName #>CommandReceiver(world, entity, entityId));
                    }
                }
                else
                {
                    entitiesNotMatchingRequirements.Add(entityId);
                }
            }

            subscriptions.Add(subscription);
            return subscription;
        }

        public override void Cancel(EntityId entityId, ITypeErasedSubscription subscription)
        {
            var sub = ((Subscription<<#= componentDetails.ComponentName #>CommandReceiver>) subscription);
            var receiver = sub.Value;
            receiver.IsValid = false;
            receiver.RemoveAllCallbacks();

            var subscriptions = entityIdToReceiveSubscriptions[entityId];
            subscriptions.Remove(sub);
            if (subscriptions.Count == 0)
            {
                entityIdToReceiveSubscriptions.Remove(entityId);
            }
        }

        public override void Invalidate(EntityId entityId, ITypeErasedSubscription subscription)
        {
            var sub = ((Subscription<<#= componentDetails.ComponentName #>CommandReceiver>) subscription);
            if (sub.HasValue)
            {
                var receiver = sub.Value;
                receiver.IsValid = false;
                receiver.RemoveAllCallbacks();
            }
        }

        public override void Restore(EntityId entityId, ITypeErasedSubscription subscription)
        {
            var sub = ((Subscription<<#= componentDetails.ComponentName #>CommandReceiver>) subscription);
            if (sub.HasValue)
            {
                sub.Value.IsValid = true;
            }
        }
    }

    public class <#= componentDetails.ComponentName #>CommandSender
    {
        private readonly Entity entity;
        private readonly CommandSystem commandSender;

<# foreach (var commandDetails in commandDetailsList) { #>
        private readonly <#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandResponseCallbackManager <#= commandDetails.CamelCaseCommandName #>CallbackManager;
<# } #>

        public <#= componentDetails.ComponentName #>CommandSender(Entity entity, World world)
        {
            this.entity = entity;

<# foreach (var commandDetails in commandDetailsList) { #>
            <#= commandDetails.CamelCaseCommandName #>CallbackManager = (<#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandResponseCallbackManager) world
                .GetExistingManager<CommandCallbackSystem>()
                .GetCommandResponseCallbackManager(typeof(<#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandResponseCallbackManager));
<# } #>
        }

<# foreach (var commandDetails in commandDetailsList) {
    var receivedCommandResponseType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.{commandDetails.CommandName}.ReceivedResponse";
    var commandRequest = $"{componentDetails.ComponentName}.{commandDetails.CommandName}.Request";
    var commandRequestSender = $"{componentDetails.ComponentName}.CommandSenders.{commandDetails.CommandName}";
#>
        public void Send<#= commandDetails.CommandName #>Command(<#= commandRequest #> request, Action<<#= receivedCommandResponseType #>> callback = null)
        {
            var requestId = commandSender.SendCommand(request, entity);
            <#= commandDetails.CamelCaseCommandName #>CallbackManager.RegisterCallback(requestId, callback);
        }
<# } #>
    }

    public class <#= componentDetails.ComponentName #>CommandReceiver
    {
        public bool IsValid;

        private readonly EntityId entityId;

<# foreach (var commandDetails in commandDetailsList) {
    var receivedCommandRequestType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.{commandDetails.CommandName}.ReceivedRequest";
    var commandRequestBufferType = $"{qualifiedNamespace}.{componentDetails.ComponentName}.CommandRequests.{commandDetails.CommandName}";
    var commandRequest = $"{componentDetails.ComponentName}.{commandDetails.CommandName}.Request";
    var commandRequestSender = $"{componentDetails.ComponentName}.CommandSenders.{commandDetails.CommandName}";
#>
        // <#= commandDetails.CommandName #> callbacks
        private readonly <#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandRequestCallbackManager <#= commandDetails.CamelCaseCommandName #>CallbackManager;

        private Dictionary<Action<<#= receivedCommandRequestType #>>, ulong> <#= commandDetails.CamelCaseCommandName #>CallbackToCallbackKey;

        public event Action<<#= receivedCommandRequestType #>> On<#= commandDetails.CommandName #>RequestReceived
        {
            add
            {
                if (<#= commandDetails.CamelCaseCommandName #>CallbackToCallbackKey == null)
                {
                    <#= commandDetails.CamelCaseCommandName #>CallbackToCallbackKey = new Dictionary<Action<<#= receivedCommandRequestType #>>, ulong>();
                }

                var key = <#= commandDetails.CamelCaseCommandName #>CallbackManager.RegisterCallback(entityId, value);
                <#= commandDetails.CamelCaseCommandName #>CallbackToCallbackKey.Add(value, key);
            }
            remove
            {
                if (!<#= commandDetails.CamelCaseCommandName #>CallbackToCallbackKey.TryGetValue(value, out var key))
                {
                    return;
                }

                <#= commandDetails.CamelCaseCommandName #>CallbackManager.UnregisterCallback(key);
                <#= commandDetails.CamelCaseCommandName #>CallbackToCallbackKey.Remove(value);
            }
        }
<# } #>

        internal <#= componentDetails.ComponentName #>CommandReceiver(World world, Entity entity, EntityId entityId)
        {
            this.entityId = entityId;
            // should check the system actually exists

<# foreach (var commandDetails in commandDetailsList) { #>
            <#= commandDetails.CamelCaseCommandName #>CallbackManager = (<#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandRequestCallbackManager) world
                .GetExistingManager<CommandCallbackSystem>()
                .GetCommandRequestCallbackManager(typeof(<#= componentDetails.ComponentName #><#= commandDetails.CommandName #>CommandRequestCallbackManager));
<# } #>

            IsValid = true;
        }

        public void RemoveAllCallbacks()
        {
<# foreach (var commandDetails in commandDetailsList) { #>
            if (<#= commandDetails.CamelCaseCommandName #>CallbackToCallbackKey != null)
            {
                foreach (var callbackToKey in <#= commandDetails.CamelCaseCommandName #>CallbackToCallbackKey)
                {
                    <#= commandDetails.CamelCaseCommandName #>CallbackManager.UnregisterCallback(callbackToKey.Value);
                }
            }

<# } #>
        }
    }
}
