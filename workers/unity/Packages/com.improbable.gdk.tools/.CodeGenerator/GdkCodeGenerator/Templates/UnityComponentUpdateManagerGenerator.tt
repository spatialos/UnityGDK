<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var eventDetailsList = GetEventDetailsList();
    var componentNamespace = qualifiedNamespace + "." + componentDetails.ComponentName;
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.Profiling;
using Unity.Mathematics;
using Unity.Entities;
using Unity.Collections;
using Improbable.Worker.CInterop;
using Improbable.Gdk.Core;
using Improbable.Gdk.Core.CodegenAdapters;
using Improbable.Gdk.Core.Commands;
using Improbable.Gdk.ReactiveComponents;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public class UpdateEventManager : IComponentManager, IUpdateSender<Component>, IAuthorityManager
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>
            , IEventManager<<#= eventType #>>
<# } #>
        {
            private WorkerSystem workerSystem;
            private EntityManager entityManager;
            private World world;

            private ulong currentUpdateId;

<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>
            private ListPool<<#= eventType #>> <#= ev.CamelCaseEventName #>EventPool = new ListPool<<#= eventType #>>(5, 2, 20);

            private readonly Dictionary<EntityId, List<<#= eventType #>>> <#= ev.CamelCaseEventName #>EventsToSend =
                new Dictionary<EntityId, List<<#= eventType #>>>();
<# } #>

            private readonly List<EntityId> entitiesWithEventsToSend = new List<EntityId>();

            private readonly List<ComponentUpdateToSend<Component>> updatesToSend =
                new List<ComponentUpdateToSend<Component>>();

            private readonly Dictionary<EntityId, Authority> entityIdToAuthority =
                new Dictionary<EntityId, Authority>();

            private readonly List<EntityId> authLossToAck = new List<EntityId>();

            private readonly HashSet<EntityId> entitiesWithComponent = new HashSet<EntityId>();

            private readonly ComponentType[] initialComponents = new ComponentType[]
            {
                ComponentType.Create<Component>(),
                ComponentType.Create<ComponentAuthority>(),
                ComponentType.Create<NotAuthoritative<<#= componentNamespace #>.Component>>(),
            };

            public uint GetComponentId()
            {
                return ComponentId;
            }

            public Type[] GetEventTypes()
            {
                return new Type[]
                {
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>
                    typeof(<#= eventType #>),
<# } #>
                };
            }

            public Type GetComponentType()
            {
                return typeof(Component);
            }

            public ComponentType[] GetInitialComponents()
            {
                return initialComponents;
            }

            public void ApplyDiff(ViewDiff diff)
            {
                var diffStorage = (DiffComponentStorage) diff.GetComponentDiffStorage(ComponentId);

                foreach (var entityId in diffStorage.GetComponentsAdded())
                {
                    AddComponent(entityId);
                }

                var updates = diffStorage.GetUpdates();
                for (int i = 0; i < updates.Count; ++i)
                {
                    ApplyUpdate(in updates[i]);
                }

                var authChanges = diffStorage.GetAuthorityChanges();
                for (int i = 0; i < authChanges.Count; ++i)
                {
                    ref readonly var change = ref authChanges[i];
                    SetAuthority(change.EntityId, change.Authority);
                }

                foreach (var entityId in diffStorage.GetComponentsRemoved())
                {
                    RemoveComponent(entityId);
                }
            }

            public void SendAll()
            {
                var connection = workerSystem.Connection;

                foreach (var entityId in authLossToAck)
                {
                    connection.SendAuthorityLossImminentAcknowledgement(entityId.Id, ComponentId);
                }

                foreach (var update in updatesToSend)
                {
                    entitiesWithEventsToSend.Remove(update.EntityId);

                    var componentUpdate = new global::Improbable.Worker.CInterop.SchemaComponentUpdate(<#= componentDetails.ComponentId #>);
                    <#= componentNamespace #>.Serialization.SerializeUpdate(update.Update, componentUpdate);

<# if (eventDetailsList.Count > 0) { #>
                    // Serialize events
                    var eventsObject = componentUpdate.GetEvents();
<# foreach (var ev in eventDetailsList) { #>
                    if (<#= ev.CamelCaseEventName #>EventsToSend.TryGetValue(update.EntityId, out var <#= ev.CamelCaseEventName #>Events))
                    {
                        foreach (var e in <#= ev.CamelCaseEventName #>Events)
                        {
                            var obj = eventsObject.AddObject(<#= ev.EventIndex #>);
                            <#= ev.FqnPayloadType #>.Serialization.Serialize(e.Payload, obj);
                        }

                        <#= ev.CamelCaseEventName #>EventPool.Return(<#= ev.CamelCaseEventName #>Events);
                        <#= ev.CamelCaseEventName #>EventsToSend.Remove(update.EntityId);
                    }
<# } #>
<# } #>

                    connection.SendComponentUpdate(update.EntityId.Id, new global::Improbable.Worker.CInterop.ComponentUpdate(componentUpdate));
                }

                foreach (var entityId in entitiesWithEventsToSend)
                {
                    var componentUpdate = new global::Improbable.Worker.CInterop.SchemaComponentUpdate(<#= componentDetails.ComponentId #>);
                    var eventsObject = componentUpdate.GetEvents();
<# foreach (var ev in eventDetailsList) { #>

                    if (<#= ev.CamelCaseEventName #>EventsToSend.TryGetValue(entityId, out var <#= ev.CamelCaseEventName #>Events))
                    {
                        foreach (var e in <#= ev.CamelCaseEventName #>Events)
                        {
                            var obj = eventsObject.AddObject(<#= ev.EventIndex #>);
                            <#= ev.FqnPayloadType #>.Serialization.Serialize(e.Payload, obj);
                        }

                        <#= ev.CamelCaseEventName #>EventPool.Return(<#= ev.CamelCaseEventName #>Events);
                        <#= ev.CamelCaseEventName #>EventsToSend.Remove(entityId);
                    }
<# } #>

                    connection.SendComponentUpdate(entityId.Id, new global::Improbable.Worker.CInterop.ComponentUpdate(componentUpdate));
                }

                entitiesWithEventsToSend.Clear();
                authLossToAck.Clear();
                updatesToSend.Clear();
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>
                <#= ev.CamelCaseEventName #>EventsToSend.Clear();
<# } #>
            }

            public void Init(World world)
            {
                this.world = world;
                entityManager = world.GetOrCreateManager<EntityManager>();

                workerSystem = world.GetExistingManager<WorkerSystem>();

                if (workerSystem == null)
                {
                    throw new ArgumentException("World instance is not running a valid SpatialOS worker");
                }
            }

            public void Clean(World world)
            {
<# foreach (var fieldDetails in fieldDetailsList) { #>
<# if (!fieldDetails.IsBlittable) { #>
                <#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= fieldDetails.PascalCaseName #>Provider.CleanDataInWorld(world);
<# } #>
<# } #>
            }

            public bool HasComponent(EntityId entityId)
            {
                return entitiesWithComponent.Contains(entityId);
            }
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>

            public void SendEvent(<#= eventType #> eventToSend, EntityId entityId)
            {
                if (!entitiesWithEventsToSend.Contains(entityId))
                {
                    entitiesWithEventsToSend.Add(entityId);
                }

                if (!<#= ev.CamelCaseEventName #>EventsToSend.TryGetValue(entityId, out var events))
                {
                    events = <#= ev.CamelCaseEventName #>EventPool.Rent();
                    <#= ev.CamelCaseEventName #>EventsToSend.Add(entityId, events);
                }

                events.Add(eventToSend);
            }
<# } #>

            public void SendComponentUpdate(Component updateToSend, EntityId entityId)
            {
                updatesToSend.Add(new ComponentUpdateToSend<Component>(updateToSend, entityId));
            }

            public Authority GetAuthority(EntityId entityId)
            {
                if (!entityIdToAuthority.TryGetValue(entityId, out var authority))
                {
                    throw new ArgumentException("Can not check authority; entity-component not in view.");
                }

                return authority;
            }

            public void AcknowledgeAuthorityLoss(EntityId entityId)
            {
                if (GetAuthority(entityId) != Authority.AuthorityLossImminent)
                {
                    throw new InvalidOperationException("Can not acknowledge authority loss");
                }

                authLossToAck.Add(entityId);
            }

            private void AddComponent(EntityId entityId)
            {
                entitiesWithComponent.Add(entityId);

                entityIdToAuthority[entityId] = Authority.NotAuthoritative;
                workerSystem.TryGetEntity(entityId, out var entity);

                var component = new <#= componentNamespace #>.Component();

<# foreach (var fieldDetails in fieldDetailsList) { #>
<# if (!fieldDetails.IsBlittable) { #>
                component.<#= fieldDetails.CamelCaseName#>Handle = <#= qualifiedNamespace #>.<#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= fieldDetails.PascalCaseName #>Provider.Allocate(world);
<# } #>
<# } #>
                component.MarkDataClean();
                entityManager.AddSharedComponentData(entity, ComponentAuthority.NotAuthoritative);
                entityManager.AddComponentData(entity, component);
            }

            private void RemoveComponent(EntityId entityId)
            {
                entitiesWithComponent.Remove(entityId);

                workerSystem.TryGetEntity(entityId, out var entity);
                entityManager.RemoveComponent<ComponentAuthority>(entity);
                entityIdToAuthority.Remove(entityId);
<# if (!componentDetails.IsBlittable) { #>

                var data = entityManager.GetComponentData<<#= componentNamespace #>.Component>(entity);
<# foreach (var fieldDetails in fieldDetailsList) { #>
<# if (!fieldDetails.IsBlittable) { #>
                <#= componentDetails.ComponentName #>.ReferenceTypeProviders.<#= fieldDetails.PascalCaseName #>Provider.Free(data.<#= fieldDetails.CamelCaseName #>Handle);
<# } #>
<# } #>
<# } #>

                entityManager.RemoveComponent<<#= componentNamespace #>.Component>(entity);
            }

            private void ApplyUpdate(in ComponentUpdateReceived<Update> update)
            {
                workerSystem.TryGetEntity(update.EntityId, out var entity);
                if (!entityManager.HasComponent<<#= componentNamespace #>.Component>(entity))
                {
                    return;
                }

                var data = entityManager.GetComponentData<<#= componentNamespace #>.Component>(entity);
<# foreach(var fieldDetails in fieldDetailsList) { #>

                if (update.Update.<#= fieldDetails.PascalCaseName #>.HasValue)
                {
                    data.<#= fieldDetails.PascalCaseName #> = update.Update.<#= fieldDetails.PascalCaseName #>.Value;
                }
<# } #>

                data.MarkDataClean();
                entityManager.SetComponentData(entity, data);
            }

            private void SetAuthority(EntityId entityId, Authority authority)
            {
                entityIdToAuthority[entityId] = authority;

                switch (authority)
                {
                    case Authority.NotAuthoritative:
                    {
                        workerSystem.TryGetEntity(entityId, out var entity);
                        entityManager.SetSharedComponentData(entity, ComponentAuthority.NotAuthoritative);
                        break;
                    }
                    case Authority.Authoritative:
                    {
                        workerSystem.TryGetEntity(entityId, out var entity);
                        entityManager.SetSharedComponentData(entity, ComponentAuthority.Authoritative);
                        break;
                    }
                    case Authority.AuthorityLossImminent:
                        break;
                }
            }
        }
    }
}
