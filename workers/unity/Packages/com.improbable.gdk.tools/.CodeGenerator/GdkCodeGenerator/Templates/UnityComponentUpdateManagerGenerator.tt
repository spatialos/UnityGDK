<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var commandDetailsList = GetCommandDetailsList();
    var eventDetailsList = GetEventDetailsList();
    var componentNamespace = qualifiedNamespace + "." + componentDetails.ComponentName;
    var profilingStart = $"Profiler.BeginSample(\"{componentDetails.ComponentName}\");";
    var profilingEnd = "Profiler.EndSample();";
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.Profiling;
using Unity.Mathematics;
using Unity.Entities;
using Unity.Collections;
using Improbable.Worker.CInterop;
using Improbable.Gdk.Core;
using Improbable.Gdk.Core.CodegenAdapters;
using Improbable.Gdk.Core.Commands;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public class UpdateEventManager : IComponentManager, IUpdateSender<Component>, IUpdateReceiver<Update>, IAuthorityManager
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>
            , IEventManager<<#= eventType #>>
<# } #>
        {
            private WorkerSystem workerSystem;
            private EntityManager entityManager;
            private World world;

            private ulong currentUpdateId;

<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>
            private ListPool<<#= eventType #>> <#= ev.CamelCaseEventName #>EventPool = new ListPool<<#= eventType #>>(5, 2, 20);

            private readonly Dictionary<EntityId, List<<#= eventType #>>> <#= ev.CamelCaseEventName #>EventsToSend =
                new Dictionary<EntityId, List<<#= eventType #>>>();

            private readonly List<ComponentEventReceived<<#= eventType #>>> <#= ev.CamelCaseEventName #>EventsReceived =
                new List<ComponentEventReceived<<#= eventType #>>>();

<# } #>

            private readonly List<EntityId> entitiesWithEventsToSend = new List<EntityId>();

            private readonly List<ComponentUpdateToSend<Component>> updatesToSend =
                new List<ComponentUpdateToSend<Component>>();

            private readonly ReceivedMessageList<ComponentUpdateReceived<Update>> updatesReceived =
                new ReceivedMessageList<ComponentUpdateReceived<Update>>();

            private readonly Dictionary<EntityId, Authority> entityIdToAuthority =
                new Dictionary<EntityId, Authority>();

            private readonly List<EntityId> authLossToAck = new List<EntityId>();

            private readonly UpdateComparer updateComparer = new UpdateComparer();

            private bool updatesSorted;

            public uint GetComponentId()
            {
                return ComponentId;
            }

            public Type[] GetEventTypes()
            {
                return new Type[]
                {
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>
                    typeof(<#= eventType #>),
<# } #>
                };
            }

            public Type GetUpdateType()
            {
                return typeof(Update);
            }

            public Type GetComponentType()
            {
                return typeof(Component);
            }

            public void SendAll()
            {
                var connection = workerSystem.Connection;

                foreach (var entityId in authLossToAck)
                {
                    connection.SendAuthorityLossImminentAcknowledgement(entityId.Id, ComponentId);
                }

                foreach (var update in updatesToSend)
                {
                    entitiesWithEventsToSend.Remove(update.EntityId);

                    var componentUpdate = new global::Improbable.Worker.CInterop.SchemaComponentUpdate(<#= componentDetails.ComponentId #>);
                    <#= componentNamespace #>.Serialization.SerializeUpdate(update.Update, componentUpdate);

<# if (eventDetailsList.Count > 0) { #>
                    // Serialize events
                    var eventsObject = componentUpdate.GetEvents();
<# foreach (var ev in eventDetailsList) { #>
                    if (<#= ev.CamelCaseEventName #>EventsToSend.TryGetValue(update.EntityId, out var <#= ev.CamelCaseEventName #>Events))
                    {
                        foreach (var e in <#= ev.CamelCaseEventName #>Events)
                        {
                            var obj = eventsObject.AddObject(<#= ev.EventIndex #>);
                            <#= ev.FqnPayloadType #>.Serialization.Serialize(e.Payload, obj);
                        }

                        <#= ev.CamelCaseEventName #>EventPool.Return(<#= ev.CamelCaseEventName #>Events);
                        <#= ev.CamelCaseEventName #>EventsToSend.Remove(update.EntityId);
                    }
<# } #>
<# } #>

                    connection.SendComponentUpdate(update.EntityId.Id, new global::Improbable.Worker.CInterop.ComponentUpdate(componentUpdate));
                }

                foreach (var entityId in entitiesWithEventsToSend)
                {
                    var componentUpdate = new global::Improbable.Worker.CInterop.SchemaComponentUpdate(<#= componentDetails.ComponentId #>);
                    var eventsObject = componentUpdate.GetEvents();
<# foreach (var ev in eventDetailsList) { #>

                    if (<#= ev.CamelCaseEventName #>EventsToSend.TryGetValue(entityId, out var <#= ev.CamelCaseEventName #>Events))
                    {
                        foreach (var e in <#= ev.CamelCaseEventName #>Events)
                        {
                            var obj = eventsObject.AddObject(<#= ev.EventIndex #>);
                            <#= ev.FqnPayloadType #>.Serialization.Serialize(e.Payload, obj);
                        }

                        <#= ev.CamelCaseEventName #>EventPool.Return(<#= ev.CamelCaseEventName #>Events);
                        <#= ev.CamelCaseEventName #>EventsToSend.Remove(entityId);
                    }
<# } #>

                    connection.SendComponentUpdate(entityId.Id, new global::Improbable.Worker.CInterop.ComponentUpdate(componentUpdate));
                }

                entitiesWithEventsToSend.Clear();
                authLossToAck.Clear();
                updatesToSend.Clear();
                updatesReceived.Clear();
                updatesSorted = false;
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>
                <#= ev.CamelCaseEventName #>EventsToSend.Clear();
                <#= ev.CamelCaseEventName #>EventsReceived.Clear();
<# } #>
            }

            public void Init(World world)
            {
                this.world = world;
                entityManager = world.GetOrCreateManager<EntityManager>();

                workerSystem = world.GetExistingManager<WorkerSystem>();

                if (workerSystem == null)
                {
                    throw new ArgumentException("World instance is not running a valid SpatialOS worker");
                }

                var dispatcher = world.GetExistingManager<SpatialOSReceiveSystem>().Dispatcher;

                dispatcher.OnComponentUpdate(OnUpdate);
                dispatcher.OnAuthorityChange(OnAuthority);
                dispatcher.OnAddComponent(OnAddComponent);
                dispatcher.OnRemoveComponent(OnRemoveComponent);
            }
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>

            public void SendEvent(<#= eventType #> eventToSend, EntityId entityId)
            {
                if (!entitiesWithEventsToSend.Contains(entityId))
                {
                    entitiesWithEventsToSend.Add(entityId);
                }

                if (!<#= ev.CamelCaseEventName #>EventsToSend.TryGetValue(entityId, out var events))
                {
                    events = <#= ev.CamelCaseEventName #>EventPool.Rent();
                    <#= ev.CamelCaseEventName #>EventsToSend.Add(entityId, events);
                }

                events.Add(eventToSend);
            }

            List<ComponentEventReceived<<#= eventType #>>> IEventManager<<#= eventType #>>.GetEventsReceived()
            {
                return <#= ev.CamelCaseEventName #>EventsReceived;
            }
<# } #>

            public void SendComponentUpdate(Component updateToSend, EntityId entityId)
            {
                updatesToSend.Add(new ComponentUpdateToSend<Component>(updateToSend, entityId));
            }

            public ReceivedMessagesSpan<ComponentUpdateReceived<Update>> GetComponentUpdatesReceived()
            {
                // todo consider if this needs to be sorted
                // possible offer two functions
                // probably just sort it
                if (!updatesSorted)
                {
                    updatesSorted = true;
                    updatesReceived.Sort(updateComparer);
                }

                return new ReceivedMessagesSpan<ComponentUpdateReceived<Update>>(updatesReceived);
            }

            public ReceivedMessagesSpan<ComponentUpdateReceived<Update>> GetComponentUpdatesReceived(EntityId entityId)
            {
                if (!updatesSorted)
                {
                    updatesSorted = true;
                    updatesReceived.Sort(updateComparer);
                }

                var range = updatesReceived.GetEntityRange(entityId);
                return new ReceivedMessagesSpan<ComponentUpdateReceived<Update>>(updatesReceived, range.firstIndex,
                    range.count);
            }

            public Authority GetAuthority(EntityId entityId)
            {
                if (!entityIdToAuthority.TryGetValue(entityId, out var authority))
                {
                    throw new ArgumentException("Entity not in view");
                }

                return authority;
            }

            public void AcknowledgeAuthorityLoss(EntityId entityId)
            {
                if (GetAuthority(entityId) != Authority.AuthorityLossImminent)
                {
                    throw new InvalidOperationException("Can not acknowledge authority loss");
                }

                authLossToAck.Add(entityId);
            }

            private void OnUpdate(ComponentUpdateOp op)
            {
                if (op.Update.ComponentId != ComponentId)
                {
                    return;
                }

                workerSystem.TryGetEntity(new EntityId(op.EntityId), out var entity);

                ++currentUpdateId;

                if (entityIdToAuthority[new EntityId(op.EntityId)] == Authority.NotAuthoritative)
                {
                    var data = entityManager.GetComponentData<<#= componentNamespace #>.Component>(entity);
                    <#= componentNamespace #>.Serialization.ApplyUpdate(op.Update.SchemaData.Value, ref data);
                    data.MarkDataClean();
                    entityManager.SetComponentData(entity, data);
                }

                var update = <#= componentNamespace #>.Serialization.DeserializeUpdate(op.Update.SchemaData.Value);

                updatesReceived.Add(new ComponentUpdateReceived<Update>(update, new EntityId(op.EntityId), currentUpdateId));

<# if (eventDetailsList.Count > 0) { #>
                var eventsObject = op.Update.SchemaData.Value.GetEvents();
<# foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
#>
                {
                    var eventCount = eventsObject.GetObjectCount(<#= ev.EventIndex #>);
                    if (eventCount > 0)
                    {
                        for (uint i = 0; i < eventCount; i++)
                        {
                            var payload = <#= ev.FqnPayloadType #>.Serialization.Deserialize(eventsObject.IndexObject(<#= ev.EventIndex #>, i));
                            var e = new <#= eventType #>(payload);
                            <#= ev.CamelCaseEventName #>EventsReceived.Add(new ComponentEventReceived<<#= eventType #>>(e, new EntityId(op.EntityId), currentUpdateId));
                        }
                    }
                }
<# } #>
<# } #>
            }

            private void OnAuthority(AuthorityChangeOp op)
            {
                if (op.ComponentId != ComponentId)
                {
                    return;
                }

                entityIdToAuthority[new EntityId(op.EntityId)] = op.Authority;

                switch (op.Authority)
                {
                    case Authority.NotAuthoritative:
                    {
                        workerSystem.TryGetEntity(new EntityId(op.EntityId), out var entity);
                        entityManager.SetSharedComponentData(entity, ComponentAuthority.NotAuthoritative);
                        break;
                    }
                    case Authority.Authoritative:
                    {
                        workerSystem.TryGetEntity(new EntityId(op.EntityId), out var entity);
                        entityManager.SetSharedComponentData(entity, ComponentAuthority.Authoritative);
                        break;
                    }
                    case Authority.AuthorityLossImminent:
                        break;
                }
            }

            private void OnAddComponent(AddComponentOp op)
            {
                if (op.Data.ComponentId != ComponentId)
                {
                    return;
                }

                entityIdToAuthority[new EntityId(op.EntityId)] = Authority.NotAuthoritative;
                workerSystem.TryGetEntity(new EntityId(op.EntityId), out var entity);
                entityManager.AddSharedComponentData(entity, ComponentAuthority.NotAuthoritative);
            }

            private void OnRemoveComponent(RemoveComponentOp op)
            {
                if (op.ComponentId != ComponentId)
                {
                    return;
                }

                workerSystem.TryGetEntity(new EntityId(op.EntityId), out var entity);
                entityManager.RemoveComponent<ComponentAuthority>(entity);
                entityIdToAuthority.Remove(new EntityId(op.EntityId));
            }

            private class UpdateComparer : IComparer<ComponentUpdateReceived<Update>>
            {
                public int Compare(ComponentUpdateReceived<Update> x, ComponentUpdateReceived<Update> y)
                {
                    var entityIdCompare = x.EntityId.Id.CompareTo(y.EntityId.Id);
                    if (entityIdCompare == 0)
                    {
                        return x.UpdateId.CompareTo(y.UpdateId);
                    }

                    return entityIdCompare;
                }
            }
        }
    }
}
