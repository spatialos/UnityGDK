<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var fields = GetFieldDetailsList();
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using Improbable.Gdk.Core;
using Improbable.Worker.CInterop;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public class <#= componentDetails.ComponentName #>ViewStorage : IViewStorage, IViewComponentStorage<Snapshot>
        {
            private readonly Dictionary<long, Authority> authorityStates = new Dictionary<long, Authority>();
            private readonly Dictionary<long, Snapshot> componentData = new Dictionary<long, Snapshot>();

            public Type GetSnapshotType()
            {
                return typeof(Snapshot);
            }

            public bool HasComponent(long entityId)
            {
                return componentData.ContainsKey(entityId);
            }

            public Snapshot GetComponent(long entityId)
            {
                if (!componentData.TryGetValue(entityId, out var component))
                {
                    throw new ArgumentException($"Entity with Entity ID {entityId} does not have component {typeof(Snapshot)} in the view.");
                }

                return component;
            }

            public Authority GetAuthority(long entityId)
            {
                if (!authorityStates.TryGetValue(entityId, out var authority))
                {
                    throw new ArgumentException($"Entity with Entity ID {entityId} does not have component {typeof(Snapshot)} in the view.");
                }

                return authority;
            }

            public void ApplyDiff(ComponentUpdateSystem componentUpdateSystem)
            {
                foreach (var entity in componentUpdateSystem.GetComponentsAdded(ComponentId))
                {
                    authorityStates[entity.Id] = Authority.NotAuthoritative;
                    componentData[entity.Id] = new Snapshot();
                }

                foreach (var entity in componentUpdateSystem.GetComponentsRemoved(ComponentId))
                {
                    authorityStates.Remove(entity.Id);
                    componentData.Remove(entity.Id);
                }

                var updates = componentUpdateSystem.GetComponentUpdatesReceived<Update>();
                for (var i = 0; i < updates.Count; i++)
                {
                    var update = updates[i];
                    ApplyUpdate(update.EntityId.Id, update.Update);
                }

                var authorityChanges = componentUpdateSystem.GetAuthorityChangesReceived(ComponentId);
                for (var i = 0; i < authorityChanges.Count; i++)
                {
                    var authorityChange = authorityChanges[i];
                    authorityStates[authorityChange.EntityId.Id] = authorityChange.Authority;
                }
            }

            private void ApplyUpdate(long entityId, Update update)
            {
                var data = componentData[entityId];
<# foreach (var field in fields) {
    var name = field.PascalCaseName;
#>

                if (update.<#= name #>.HasValue)
                {
                    data.<#= name #> = update.<#= name #>.Value;
                }
<# } #>

                componentData[entityId] = data;
            }
        }
    }
}
