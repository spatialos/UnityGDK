<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var commandDetailsList = GetCommandDetailsList();
    var rootNamespace = $"global::{qualifiedNamespace}.{componentDetails.ComponentName}";
#>
<#= generatedHeader #>

using System;
using Improbable.Gdk.Core;
using Improbable.Gdk.Core.Commands;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        public class ComponentMetaclass : IComponentMetaclass
        {
            public uint ComponentId => <#= componentDetails.ComponentId #>;
            public string Name => "<#= componentDetails.ComponentName #>";

            public Type Data { get; } = typeof(<#= rootNamespace #>.Component);
            public Type Snapshot { get; } = typeof(<#= rootNamespace #>.Snapshot);
            public Type Update { get; } = typeof(<#= rootNamespace #>.Update);

            public Type ReplicationHandler { get; } = typeof(<#= rootNamespace #>.ComponentReplicator);
            public Type Serializer { get; } = typeof(<#= rootNamespace #>.ComponentSerializer);
            public Type DiffDeserializer { get; } = typeof(<#= rootNamespace #>.DiffComponentDeserializer);

            public Type DiffStorage { get; } = typeof(<#= rootNamespace #>.DiffComponentStorage);
            public Type ViewStorage { get; } = typeof(<#= rootNamespace #>.<#= componentDetails.ComponentName #>ViewStorage);
            public Type EcsViewManager { get; } = typeof(<#= rootNamespace #>.EcsViewManager);
            public Type DynamicInvokable { get; } = typeof(<#= rootNamespace #>.<#= componentDetails.ComponentName #>Dynamic);

            public ICommandMetaclass[] Commands { get; } = new ICommandMetaclass[] 
            { 
<# foreach (var command in commandDetailsList) { #>
                new <#= command.CommandName #>Metaclass(),
<# } #>
            };
        }
<# foreach (var command in commandDetailsList) { #> 

        public class <#= command.CommandName #>Metaclass : ICommandMetaclass 
        {
            public uint CommandIndex => <#= command.CommandIndex #>;
            public string Name => "<#= command.CommandName #>";

            public Type DiffDeserializer { get; } = typeof(<#= rootNamespace #>.<#= command.CommandName #>DiffCommandDeserializer);
            public Type Serializer { get; } = typeof(<#= rootNamespace #>.<#= command.CommandName #>CommandSerializer);
            
            public Type MetaDataStorage { get; } = typeof(<#= rootNamespace #>.<#= command.CommandName #>CommandMetaDataStorage);
            public Type SendStorage { get; } = typeof(<#= rootNamespace #>.<#= command.CommandName #>CommandsToSendStorage);
            public Type DiffStorage { get; } = typeof(<#= rootNamespace #>.Diff<#= command.CommandName #>CommandStorage);
        }
<# } #>
    }
}
