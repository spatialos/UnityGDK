<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var componentDetails = GetComponentDetails();
    var eventDetailsList = GetEventDetailsList();
    var componentNamespace = $"global::{qualifiedNamespace}.{componentDetails.ComponentName}";
#>
<#= generatedHeader #>

using System.Collections.Generic;
using Improbable.Gdk.Core;
using Improbable.Worker;
using Unity.Entities;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
<# foreach (var eventDetails in eventDetailsList) { #>
        public static class <#= eventDetails.EventName #>
        {
            public readonly struct Event : IEvent
            {
                public readonly <#= eventDetails.FqnPayloadType #> Payload;

                public Event(<#= eventDetails.FqnPayloadType #> payload)
                {
                    Payload = payload;
                }
            }
        }

<# } #>
    }
}
