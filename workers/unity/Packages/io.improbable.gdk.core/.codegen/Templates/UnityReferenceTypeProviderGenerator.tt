<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#
    var fieldDetailsList = GetFieldDetailsList();
    var eventDetailsList = GetEventDetailsList();
    var componentDetails = GetComponentDetails();
    var commandDetailsList = GetCommandDetailsList();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var generator = new UnityReferenceTypeProviderContent();
    var componentNamespace = $"global::{qualifiedNamespace}.{componentDetails.ComponentName}";
#>
<#= generatedHeader #>

using System;
using System.Collections.Generic;
using System.Linq;
using Improbable.Gdk.Core;

namespace <#= qualifiedNamespace #>
{
    public partial class <#= componentDetails.ComponentName #>
    {
        internal static class ReferenceTypeProviders
        {
<# foreach (var fieldDetails in fieldDetailsList) { #>
<# if (!fieldDetails.IsBlittable) { #>
            <#= CommonGeneratorUtils.IndentEveryNewline(generator.Generate(fieldDetails.PascalCaseName, fieldDetails.Type), 3) #>

<# } #>
<# } #>
        }
    }
}
